//
// Created by wuyuanyi on 19/12/18.
//

#include <boost/log/sinks/sync_frontend.hpp>
#include <boost/log/sinks/text_ostream_backend.hpp>
#include <boost/log/utility/manipulators/add_value.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/filesystem.hpp>
#include <iostream>

#include "logging.h"



namespace sinks = boost::log::sinks;
namespace logging = boost::log;
namespace src = boost::log::sources;
namespace expr = boost::log::expressions;
namespace sinks = boost::log::sinks;
void formatter(logging::record_view const& rec, logging::formatting_ostream& strm)
{
  const boost::posix_time::ptime &pt = *logging::extract< boost::posix_time::ptime >("TimeStamp", rec);
  strm << boost::posix_time::to_simple_string(pt) << " ";

  logging::value_ref< std::string > fullpath = logging::extract< std::string >("File", rec);
  strm << boost::filesystem::path(fullpath.get()).filename().string() << ":";
  strm << logging::extract< int >("Line", rec) << ": ";
  // The same for the severity level.
  // The simplified syntax is possible if attribute keywords are used.
  strm << "<" << rec[logging::trivial::severity] << "> ";

  // Finally, put the record message to the stream
  strm << rec[expr::smessage];
}

Logging::Logging() {
  typedef sinks::synchronous_sink< sinks::text_ostream_backend > text_sink;
  boost::shared_ptr< text_sink > sink = boost::make_shared< text_sink >();

  sink->locked_backend()->add_stream(
      boost::shared_ptr<std::ostream>(&std::cout));
  sink->set_formatter(&formatter);
  this->core()->get()->remove_all_sinks();
  this->core()->get()->add_sink(sink);
  logging::add_common_attributes();
}
Logging* Logging::_logger;
Logging *Logging::GetInstance() {
  if (Logging::_logger == nullptr) {
    // this pointer shall not be released
    Logging::_logger = new Logging();

  }

  return Logging::_logger;
}

void Logging::EnableLogging(bool enable) {
  this->core()->get()->set_logging_enabled(enable);
}
