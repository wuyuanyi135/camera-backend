// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_definitions.proto

#include "camera_definitions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_camera_5fdefinitions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fdefinitions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;
}  // namespace protobuf_camera_5fdefinitions_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace mvcam {
class AdapterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdapterInfo>
      _instance;
} _AdapterInfo_default_instance_;
class ParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parameter>
      _instance;
} _Parameter_default_instance_;
class ConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Configuration>
      _instance;
} _Configuration_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo>
      _instance;
} _DeviceInfo_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status>
      _instance;
} _Status_default_instance_;
}  // namespace mvcam
namespace protobuf_camera_5fdefinitions_2eproto {
static void InitDefaultsAdapterInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_AdapterInfo_default_instance_;
    new (ptr) ::mvcam::AdapterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::AdapterInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdapterInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdapterInfo}, {}};

static void InitDefaultsParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_Parameter_default_instance_;
    new (ptr) ::mvcam::Parameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::Parameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Parameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParameter}, {}};

static void InitDefaultsConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_Configuration_default_instance_;
    new (ptr) ::mvcam::Configuration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::Configuration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Configuration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfiguration}, {
      &protobuf_camera_5fdefinitions_2eproto::scc_info_Parameter.base,}};

static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_Frame_default_instance_;
    new (ptr) ::mvcam::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrame}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_DeviceInfo_default_instance_;
    new (ptr) ::mvcam::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo}, {}};

static void InitDefaultsStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvcam::_Status_default_instance_;
    new (ptr) ::mvcam::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvcam::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AdapterInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Parameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Configuration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Status.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::AdapterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::AdapterInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::AdapterInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::AdapterInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::AdapterInfo, in_use_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Parameter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Parameter, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Parameter, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, exposure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, frame_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, black_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Configuration, gamma_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, pixel_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Frame, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, manufacture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::DeviceInfo, serial_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvcam::Status, temperature_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mvcam::AdapterInfo)},
  { 9, -1, sizeof(::mvcam::Parameter)},
  { 17, -1, sizeof(::mvcam::Configuration)},
  { 27, -1, sizeof(::mvcam::Frame)},
  { 39, -1, sizeof(::mvcam::DeviceInfo)},
  { 49, -1, sizeof(::mvcam::Status)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_AdapterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_Parameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_Configuration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvcam::_Status_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camera_definitions.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030camera_definitions.proto\022\005mvcam\032\037googl"
      "e/protobuf/timestamp.proto\"Q\n\013AdapterInf"
      "o\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\023\n\013desc"
      "ription\030\003 \001(\t\022\016\n\006in_use\030\004 \001(\010\"4\n\tParamet"
      "er\022\r\n\005value\030\002 \001(\001\022\013\n\003min\030\003 \001(\001\022\013\n\003max\030\004 "
      "\001(\001\"\301\001\n\rConfiguration\022\"\n\010exposure\030\001 \001(\0132"
      "\020.mvcam.Parameter\022$\n\nframe_rate\030\002 \001(\0132\020."
      "mvcam.Parameter\022\036\n\004gain\030\003 \001(\0132\020.mvcam.Pa"
      "rameter\022%\n\013black_level\030\004 \001(\0132\020.mvcam.Par"
      "ameter\022\037\n\005gamma\030\005 \001(\0132\020.mvcam.Parameter\""
      "\223\001\n\005Frame\022-\n\ttimestamp\030\001 \001(\0132\032.google.pr"
      "otobuf.Timestamp\022\n\n\002id\030\002 \001(\004\022\014\n\004size\030\003 \001"
      "(\r\022\016\n\006height\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022\024\n\014pix"
      "el_format\030\006 \001(\r\022\014\n\004data\030\007 \001(\014\"]\n\nDeviceI"
      "nfo\022\023\n\013manufacture\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\022\r\n\005"
      "model\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\022\016\n\006serial\030\006"
      " \001(\t\"\035\n\006Status\022\023\n\013temperature\030\001 \001(\001*.\n\023D"
      "eviceControlAction\022\013\n\007Suspend\020\000\022\n\n\006Resum"
      "e\020\001B\'Z%github.com/wuyuanyi135/mvprotos/m"
      "vcamb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_definitions.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camera_5fdefinitions_2eproto
namespace mvcam {
const ::google::protobuf::EnumDescriptor* DeviceControlAction_descriptor() {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_5fdefinitions_2eproto::file_level_enum_descriptors[0];
}
bool DeviceControlAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AdapterInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdapterInfo::kNameFieldNumber;
const int AdapterInfo::kVersionFieldNumber;
const int AdapterInfo::kDescriptionFieldNumber;
const int AdapterInfo::kInUseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdapterInfo::AdapterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_AdapterInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.AdapterInfo)
}
AdapterInfo::AdapterInfo(const AdapterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  in_use_ = from.in_use_;
  // @@protoc_insertion_point(copy_constructor:mvcam.AdapterInfo)
}

void AdapterInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_use_ = false;
}

AdapterInfo::~AdapterInfo() {
  // @@protoc_insertion_point(destructor:mvcam.AdapterInfo)
  SharedDtor();
}

void AdapterInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AdapterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AdapterInfo::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdapterInfo& AdapterInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_AdapterInfo.base);
  return *internal_default_instance();
}


void AdapterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.AdapterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_use_ = false;
  _internal_metadata_.Clear();
}

bool AdapterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.AdapterInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.AdapterInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.AdapterInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.AdapterInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_use = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.AdapterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.AdapterInfo)
  return false;
#undef DO_
}

void AdapterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.AdapterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // bool in_use = 4;
  if (this->in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->in_use(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.AdapterInfo)
}

::google::protobuf::uint8* AdapterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.AdapterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.AdapterInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // bool in_use = 4;
  if (this->in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->in_use(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.AdapterInfo)
  return target;
}

size_t AdapterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.AdapterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // bool in_use = 4;
  if (this->in_use() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdapterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.AdapterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AdapterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdapterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.AdapterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.AdapterInfo)
    MergeFrom(*source);
  }
}

void AdapterInfo::MergeFrom(const AdapterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.AdapterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.in_use() != 0) {
    set_in_use(from.in_use());
  }
}

void AdapterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.AdapterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdapterInfo::CopyFrom(const AdapterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.AdapterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterInfo::IsInitialized() const {
  return true;
}

void AdapterInfo::Swap(AdapterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdapterInfo::InternalSwap(AdapterInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_use_, other->in_use_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AdapterInfo::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Parameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameter::kValueFieldNumber;
const int Parameter::kMinFieldNumber;
const int Parameter::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameter::Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_Parameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:mvcam.Parameter)
}

void Parameter::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&value_)) + sizeof(max_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:mvcam.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
}

void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameter& Parameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_Parameter.base);
  return *internal_default_instance();
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&value_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.Parameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // double min = 3;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min(), output);
  }

  // double max = 4;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.Parameter)
}

::google::protobuf::uint8* Parameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // double min = 3;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min(), target);
  }

  // double max = 4;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.Parameter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double value = 2;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // double min = 3;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // double max = 4;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Configuration::InitAsDefaultInstance() {
  ::mvcam::_Configuration_default_instance_._instance.get_mutable()->exposure_ = const_cast< ::mvcam::Parameter*>(
      ::mvcam::Parameter::internal_default_instance());
  ::mvcam::_Configuration_default_instance_._instance.get_mutable()->frame_rate_ = const_cast< ::mvcam::Parameter*>(
      ::mvcam::Parameter::internal_default_instance());
  ::mvcam::_Configuration_default_instance_._instance.get_mutable()->gain_ = const_cast< ::mvcam::Parameter*>(
      ::mvcam::Parameter::internal_default_instance());
  ::mvcam::_Configuration_default_instance_._instance.get_mutable()->black_level_ = const_cast< ::mvcam::Parameter*>(
      ::mvcam::Parameter::internal_default_instance());
  ::mvcam::_Configuration_default_instance_._instance.get_mutable()->gamma_ = const_cast< ::mvcam::Parameter*>(
      ::mvcam::Parameter::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configuration::kExposureFieldNumber;
const int Configuration::kFrameRateFieldNumber;
const int Configuration::kGainFieldNumber;
const int Configuration::kBlackLevelFieldNumber;
const int Configuration::kGammaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configuration::Configuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_Configuration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exposure()) {
    exposure_ = new ::mvcam::Parameter(*from.exposure_);
  } else {
    exposure_ = NULL;
  }
  if (from.has_frame_rate()) {
    frame_rate_ = new ::mvcam::Parameter(*from.frame_rate_);
  } else {
    frame_rate_ = NULL;
  }
  if (from.has_gain()) {
    gain_ = new ::mvcam::Parameter(*from.gain_);
  } else {
    gain_ = NULL;
  }
  if (from.has_black_level()) {
    black_level_ = new ::mvcam::Parameter(*from.black_level_);
  } else {
    black_level_ = NULL;
  }
  if (from.has_gamma()) {
    gamma_ = new ::mvcam::Parameter(*from.gamma_);
  } else {
    gamma_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mvcam.Configuration)
}

void Configuration::SharedCtor() {
  ::memset(&exposure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamma_) -
      reinterpret_cast<char*>(&exposure_)) + sizeof(gamma_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:mvcam.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != internal_default_instance()) delete exposure_;
  if (this != internal_default_instance()) delete frame_rate_;
  if (this != internal_default_instance()) delete gain_;
  if (this != internal_default_instance()) delete black_level_;
  if (this != internal_default_instance()) delete gamma_;
}

void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Configuration& Configuration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_Configuration.base);
  return *internal_default_instance();
}


void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exposure_ != NULL) {
    delete exposure_;
  }
  exposure_ = NULL;
  if (GetArenaNoVirtual() == NULL && frame_rate_ != NULL) {
    delete frame_rate_;
  }
  frame_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && gain_ != NULL) {
    delete gain_;
  }
  gain_ = NULL;
  if (GetArenaNoVirtual() == NULL && black_level_ != NULL) {
    delete black_level_;
  }
  black_level_ = NULL;
  if (GetArenaNoVirtual() == NULL && gamma_ != NULL) {
    delete gamma_;
  }
  gamma_ = NULL;
  _internal_metadata_.Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.Configuration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mvcam.Parameter exposure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exposure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvcam.Parameter frame_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvcam.Parameter gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvcam.Parameter black_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_black_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvcam.Parameter gamma = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamma()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.Configuration)
  return false;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mvcam.Parameter exposure = 1;
  if (this->has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_exposure(), output);
  }

  // .mvcam.Parameter frame_rate = 2;
  if (this->has_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_frame_rate(), output);
  }

  // .mvcam.Parameter gain = 3;
  if (this->has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_gain(), output);
  }

  // .mvcam.Parameter black_level = 4;
  if (this->has_black_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_black_level(), output);
  }

  // .mvcam.Parameter gamma = 5;
  if (this->has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_gamma(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.Configuration)
}

::google::protobuf::uint8* Configuration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.Configuration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mvcam.Parameter exposure = 1;
  if (this->has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_exposure(), deterministic, target);
  }

  // .mvcam.Parameter frame_rate = 2;
  if (this->has_frame_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_frame_rate(), deterministic, target);
  }

  // .mvcam.Parameter gain = 3;
  if (this->has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_gain(), deterministic, target);
  }

  // .mvcam.Parameter black_level = 4;
  if (this->has_black_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_black_level(), deterministic, target);
  }

  // .mvcam.Parameter gamma = 5;
  if (this->has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_gamma(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.Configuration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mvcam.Parameter exposure = 1;
  if (this->has_exposure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exposure_);
  }

  // .mvcam.Parameter frame_rate = 2;
  if (this->has_frame_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_rate_);
  }

  // .mvcam.Parameter gain = 3;
  if (this->has_gain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gain_);
  }

  // .mvcam.Parameter black_level = 4;
  if (this->has_black_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *black_level_);
  }

  // .mvcam.Parameter gamma = 5;
  if (this->has_gamma()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamma_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Configuration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.Configuration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exposure()) {
    mutable_exposure()->::mvcam::Parameter::MergeFrom(from.exposure());
  }
  if (from.has_frame_rate()) {
    mutable_frame_rate()->::mvcam::Parameter::MergeFrom(from.frame_rate());
  }
  if (from.has_gain()) {
    mutable_gain()->::mvcam::Parameter::MergeFrom(from.gain());
  }
  if (from.has_black_level()) {
    mutable_black_level()->::mvcam::Parameter::MergeFrom(from.black_level());
  }
  if (from.has_gamma()) {
    mutable_gamma()->::mvcam::Parameter::MergeFrom(from.gamma());
  }
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  swap(exposure_, other->exposure_);
  swap(frame_rate_, other->frame_rate_);
  swap(gain_, other->gain_);
  swap(black_level_, other->black_level_);
  swap(gamma_, other->gamma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::mvcam::_Frame_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Frame::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kTimestampFieldNumber;
const int Frame::kIdFieldNumber;
const int Frame::kSizeFieldNumber;
const int Frame::kHeightFieldNumber;
const int Frame::kWidthFieldNumber;
const int Frame::kPixelFormatFieldNumber;
const int Frame::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_format_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pixel_format_));
  // @@protoc_insertion_point(copy_constructor:mvcam.Frame)
}

void Frame::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pixel_format_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:mvcam.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pixel_format_));
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pixel_format = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_timestamp(), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // uint32 width = 5;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // uint32 pixel_format = 6;
  if (this->pixel_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pixel_format(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_timestamp(), deterministic, target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // uint32 width = 5;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // uint32 pixel_format = 6;
  if (this->pixel_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pixel_format(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.Frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 width = 5;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 pixel_format = 6;
  if (this->pixel_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pixel_format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.pixel_format() != 0) {
    set_pixel_format(from.pixel_format());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(size_, other->size_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(pixel_format_, other->pixel_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kManufactureFieldNumber;
const int DeviceInfo::kIdFieldNumber;
const int DeviceInfo::kModelFieldNumber;
const int DeviceInfo::kVersionFieldNumber;
const int DeviceInfo::kSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_DeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacture().size() > 0) {
    manufacture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial().size() > 0) {
    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  // @@protoc_insertion_point(copy_constructor:mvcam.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  manufacture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:mvcam.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  manufacture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_DeviceInfo.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacture = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacture().data(), static_cast<int>(this->manufacture().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.DeviceInfo.manufacture"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.DeviceInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.DeviceInfo.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.DeviceInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial().data(), static_cast<int>(this->serial().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mvcam.DeviceInfo.serial"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacture = 2;
  if (this->manufacture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture().data(), static_cast<int>(this->manufacture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.manufacture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacture(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // string serial = 6;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), static_cast<int>(this->serial().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serial(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacture = 2;
  if (this->manufacture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture().data(), static_cast<int>(this->manufacture().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.manufacture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->manufacture(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // string serial = 6;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial().data(), static_cast<int>(this->serial().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mvcam.DeviceInfo.serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serial(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.DeviceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string manufacture = 2;
  if (this->manufacture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacture());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string model = 4;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial = 6;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacture().size() > 0) {

    manufacture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial().size() > 0) {

    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  manufacture_.Swap(&other->manufacture_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_.Swap(&other->serial_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fdefinitions_2eproto::scc_info_Status.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvcam.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:mvcam.Status)
}

void Status::SharedCtor() {
  temperature_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mvcam.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  ::protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fdefinitions_2eproto::scc_info_Status.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mvcam.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperature_ = 0;
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvcam.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double temperature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvcam.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvcam.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvcam.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temperature = 1;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->temperature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mvcam.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvcam.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temperature = 1;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->temperature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvcam.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvcam.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double temperature = 1;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvcam.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvcam.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvcam.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvcam.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvcam.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvcam.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(temperature_, other->temperature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_camera_5fdefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fdefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mvcam
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::AdapterInfo* Arena::CreateMaybeMessage< ::mvcam::AdapterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::AdapterInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::Parameter* Arena::CreateMaybeMessage< ::mvcam::Parameter >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::Parameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::Configuration* Arena::CreateMaybeMessage< ::mvcam::Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::Configuration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::Frame* Arena::CreateMaybeMessage< ::mvcam::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::Frame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::DeviceInfo* Arena::CreateMaybeMessage< ::mvcam::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::DeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvcam::Status* Arena::CreateMaybeMessage< ::mvcam::Status >(Arena* arena) {
  return Arena::CreateInternal< ::mvcam::Status >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
