// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_definitions.proto

#ifndef PROTOBUF_INCLUDED_camera_5fdefinitions_2eproto
#define PROTOBUF_INCLUDED_camera_5fdefinitions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fdefinitions_2eproto 

namespace protobuf_camera_5fdefinitions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_camera_5fdefinitions_2eproto
namespace CameraServer {
class AdapterCapability;
class AdapterCapabilityDefaultTypeInternal;
extern AdapterCapabilityDefaultTypeInternal _AdapterCapability_default_instance_;
class AdapterInfo;
class AdapterInfoDefaultTypeInternal;
extern AdapterInfoDefaultTypeInternal _AdapterInfo_default_instance_;
class AdapterRequest;
class AdapterRequestDefaultTypeInternal;
extern AdapterRequestDefaultTypeInternal _AdapterRequest_default_instance_;
class AvailableAdaptersResponse;
class AvailableAdaptersResponseDefaultTypeInternal;
extern AvailableAdaptersResponseDefaultTypeInternal _AvailableAdaptersResponse_default_instance_;
class CameraCapability;
class CameraCapabilityDefaultTypeInternal;
extern CameraCapabilityDefaultTypeInternal _CameraCapability_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class ConfigureRequest;
class ConfigureRequestDefaultTypeInternal;
extern ConfigureRequestDefaultTypeInternal _ConfigureRequest_default_instance_;
class DeviceControlRequest;
class DeviceControlRequestDefaultTypeInternal;
extern DeviceControlRequestDefaultTypeInternal _DeviceControlRequest_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceListResponse;
class DeviceListResponseDefaultTypeInternal;
extern DeviceListResponseDefaultTypeInternal _DeviceListResponse_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameStream;
class FrameStreamDefaultTypeInternal;
extern FrameStreamDefaultTypeInternal _FrameStream_default_instance_;
class IdRequest;
class IdRequestDefaultTypeInternal;
extern IdRequestDefaultTypeInternal _IdRequest_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StreamingRequest;
class StreamingRequestDefaultTypeInternal;
extern StreamingRequestDefaultTypeInternal _StreamingRequest_default_instance_;
}  // namespace CameraServer
namespace google {
namespace protobuf {
template<> ::CameraServer::AdapterCapability* Arena::CreateMaybeMessage<::CameraServer::AdapterCapability>(Arena*);
template<> ::CameraServer::AdapterInfo* Arena::CreateMaybeMessage<::CameraServer::AdapterInfo>(Arena*);
template<> ::CameraServer::AdapterRequest* Arena::CreateMaybeMessage<::CameraServer::AdapterRequest>(Arena*);
template<> ::CameraServer::AvailableAdaptersResponse* Arena::CreateMaybeMessage<::CameraServer::AvailableAdaptersResponse>(Arena*);
template<> ::CameraServer::CameraCapability* Arena::CreateMaybeMessage<::CameraServer::CameraCapability>(Arena*);
template<> ::CameraServer::Configuration* Arena::CreateMaybeMessage<::CameraServer::Configuration>(Arena*);
template<> ::CameraServer::ConfigureRequest* Arena::CreateMaybeMessage<::CameraServer::ConfigureRequest>(Arena*);
template<> ::CameraServer::DeviceControlRequest* Arena::CreateMaybeMessage<::CameraServer::DeviceControlRequest>(Arena*);
template<> ::CameraServer::DeviceInfo* Arena::CreateMaybeMessage<::CameraServer::DeviceInfo>(Arena*);
template<> ::CameraServer::DeviceListResponse* Arena::CreateMaybeMessage<::CameraServer::DeviceListResponse>(Arena*);
template<> ::CameraServer::Frame* Arena::CreateMaybeMessage<::CameraServer::Frame>(Arena*);
template<> ::CameraServer::FrameStream* Arena::CreateMaybeMessage<::CameraServer::FrameStream>(Arena*);
template<> ::CameraServer::IdRequest* Arena::CreateMaybeMessage<::CameraServer::IdRequest>(Arena*);
template<> ::CameraServer::Parameter* Arena::CreateMaybeMessage<::CameraServer::Parameter>(Arena*);
template<> ::CameraServer::Status* Arena::CreateMaybeMessage<::CameraServer::Status>(Arena*);
template<> ::CameraServer::StreamingRequest* Arena::CreateMaybeMessage<::CameraServer::StreamingRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CameraServer {

enum DeviceControlAction {
  Suspend = 0,
  Resume = 1,
  DeviceControlAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceControlAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceControlAction_IsValid(int value);
const DeviceControlAction DeviceControlAction_MIN = Suspend;
const DeviceControlAction DeviceControlAction_MAX = Resume;
const int DeviceControlAction_ARRAYSIZE = DeviceControlAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceControlAction_descriptor();
inline const ::std::string& DeviceControlAction_Name(DeviceControlAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceControlAction_descriptor(), value);
}
inline bool DeviceControlAction_Parse(
    const ::std::string& name, DeviceControlAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceControlAction>(
    DeviceControlAction_descriptor(), name, value);
}
// ===================================================================

class AdapterCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.AdapterCapability) */ {
 public:
  AdapterCapability();
  virtual ~AdapterCapability();

  AdapterCapability(const AdapterCapability& from);

  inline AdapterCapability& operator=(const AdapterCapability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdapterCapability(AdapterCapability&& from) noexcept
    : AdapterCapability() {
    *this = ::std::move(from);
  }

  inline AdapterCapability& operator=(AdapterCapability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdapterCapability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdapterCapability* internal_default_instance() {
    return reinterpret_cast<const AdapterCapability*>(
               &_AdapterCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AdapterCapability* other);
  friend void swap(AdapterCapability& a, AdapterCapability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdapterCapability* New() const final {
    return CreateMaybeMessage<AdapterCapability>(NULL);
  }

  AdapterCapability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdapterCapability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdapterCapability& from);
  void MergeFrom(const AdapterCapability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdapterCapability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool should_shut_down = 1;
  void clear_should_shut_down();
  static const int kShouldShutDownFieldNumber = 1;
  bool should_shut_down() const;
  void set_should_shut_down(bool value);

  // @@protoc_insertion_point(class_scope:CameraServer.AdapterCapability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool should_shut_down_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdapterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.AdapterInfo) */ {
 public:
  AdapterInfo();
  virtual ~AdapterInfo();

  AdapterInfo(const AdapterInfo& from);

  inline AdapterInfo& operator=(const AdapterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdapterInfo(AdapterInfo&& from) noexcept
    : AdapterInfo() {
    *this = ::std::move(from);
  }

  inline AdapterInfo& operator=(AdapterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdapterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdapterInfo* internal_default_instance() {
    return reinterpret_cast<const AdapterInfo*>(
               &_AdapterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AdapterInfo* other);
  friend void swap(AdapterInfo& a, AdapterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdapterInfo* New() const final {
    return CreateMaybeMessage<AdapterInfo>(NULL);
  }

  AdapterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdapterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdapterInfo& from);
  void MergeFrom(const AdapterInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdapterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .CameraServer.AdapterCapability capability = 5;
  bool has_capability() const;
  void clear_capability();
  static const int kCapabilityFieldNumber = 5;
  private:
  const ::CameraServer::AdapterCapability& _internal_capability() const;
  public:
  const ::CameraServer::AdapterCapability& capability() const;
  ::CameraServer::AdapterCapability* release_capability();
  ::CameraServer::AdapterCapability* mutable_capability();
  void set_allocated_capability(::CameraServer::AdapterCapability* capability);

  // bool in_use = 4;
  void clear_in_use();
  static const int kInUseFieldNumber = 4;
  bool in_use() const;
  void set_in_use(bool value);

  // @@protoc_insertion_point(class_scope:CameraServer.AdapterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::CameraServer::AdapterCapability* capability_;
  bool in_use_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AvailableAdaptersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.AvailableAdaptersResponse) */ {
 public:
  AvailableAdaptersResponse();
  virtual ~AvailableAdaptersResponse();

  AvailableAdaptersResponse(const AvailableAdaptersResponse& from);

  inline AvailableAdaptersResponse& operator=(const AvailableAdaptersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvailableAdaptersResponse(AvailableAdaptersResponse&& from) noexcept
    : AvailableAdaptersResponse() {
    *this = ::std::move(from);
  }

  inline AvailableAdaptersResponse& operator=(AvailableAdaptersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AvailableAdaptersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvailableAdaptersResponse* internal_default_instance() {
    return reinterpret_cast<const AvailableAdaptersResponse*>(
               &_AvailableAdaptersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AvailableAdaptersResponse* other);
  friend void swap(AvailableAdaptersResponse& a, AvailableAdaptersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvailableAdaptersResponse* New() const final {
    return CreateMaybeMessage<AvailableAdaptersResponse>(NULL);
  }

  AvailableAdaptersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvailableAdaptersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvailableAdaptersResponse& from);
  void MergeFrom(const AvailableAdaptersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableAdaptersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CameraServer.AdapterInfo adapters = 1;
  int adapters_size() const;
  void clear_adapters();
  static const int kAdaptersFieldNumber = 1;
  ::CameraServer::AdapterInfo* mutable_adapters(int index);
  ::google::protobuf::RepeatedPtrField< ::CameraServer::AdapterInfo >*
      mutable_adapters();
  const ::CameraServer::AdapterInfo& adapters(int index) const;
  ::CameraServer::AdapterInfo* add_adapters();
  const ::google::protobuf::RepeatedPtrField< ::CameraServer::AdapterInfo >&
      adapters() const;

  // @@protoc_insertion_point(class_scope:CameraServer.AvailableAdaptersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CameraServer::AdapterInfo > adapters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdapterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.AdapterRequest) */ {
 public:
  AdapterRequest();
  virtual ~AdapterRequest();

  AdapterRequest(const AdapterRequest& from);

  inline AdapterRequest& operator=(const AdapterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdapterRequest(AdapterRequest&& from) noexcept
    : AdapterRequest() {
    *this = ::std::move(from);
  }

  inline AdapterRequest& operator=(AdapterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdapterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdapterRequest* internal_default_instance() {
    return reinterpret_cast<const AdapterRequest*>(
               &_AdapterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AdapterRequest* other);
  friend void swap(AdapterRequest& a, AdapterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdapterRequest* New() const final {
    return CreateMaybeMessage<AdapterRequest>(NULL);
  }

  AdapterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdapterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdapterRequest& from);
  void MergeFrom(const AdapterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdapterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CameraServer.AdapterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.CameraCapability) */ {
 public:
  CameraCapability();
  virtual ~CameraCapability();

  CameraCapability(const CameraCapability& from);

  inline CameraCapability& operator=(const CameraCapability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraCapability(CameraCapability&& from) noexcept
    : CameraCapability() {
    *this = ::std::move(from);
  }

  inline CameraCapability& operator=(CameraCapability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCapability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCapability* internal_default_instance() {
    return reinterpret_cast<const CameraCapability*>(
               &_CameraCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CameraCapability* other);
  friend void swap(CameraCapability& a, CameraCapability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCapability* New() const final {
    return CreateMaybeMessage<CameraCapability>(NULL);
  }

  CameraCapability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraCapability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraCapability& from);
  void MergeFrom(const CameraCapability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCapability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool can_shutdown = 1;
  void clear_can_shutdown();
  static const int kCanShutdownFieldNumber = 1;
  bool can_shutdown() const;
  void set_can_shutdown(bool value);

  // bool can_open = 2;
  void clear_can_open();
  static const int kCanOpenFieldNumber = 2;
  bool can_open() const;
  void set_can_open(bool value);

  // bool can_capture_async = 3;
  void clear_can_capture_async();
  static const int kCanCaptureAsyncFieldNumber = 3;
  bool can_capture_async() const;
  void set_can_capture_async(bool value);

  // bool can_capture = 4;
  void clear_can_capture();
  static const int kCanCaptureFieldNumber = 4;
  bool can_capture() const;
  void set_can_capture(bool value);

  // bool can_adjust_exposure = 5;
  void clear_can_adjust_exposure();
  static const int kCanAdjustExposureFieldNumber = 5;
  bool can_adjust_exposure() const;
  void set_can_adjust_exposure(bool value);

  // bool can_adjust_gain = 6;
  void clear_can_adjust_gain();
  static const int kCanAdjustGainFieldNumber = 6;
  bool can_adjust_gain() const;
  void set_can_adjust_gain(bool value);

  // bool can_adjust_gamma = 7;
  void clear_can_adjust_gamma();
  static const int kCanAdjustGammaFieldNumber = 7;
  bool can_adjust_gamma() const;
  void set_can_adjust_gamma(bool value);

  // bool can_adjust_black_level = 8;
  void clear_can_adjust_black_level();
  static const int kCanAdjustBlackLevelFieldNumber = 8;
  bool can_adjust_black_level() const;
  void set_can_adjust_black_level(bool value);

  // bool can_adjust_frame_rate = 9;
  void clear_can_adjust_frame_rate();
  static const int kCanAdjustFrameRateFieldNumber = 9;
  bool can_adjust_frame_rate() const;
  void set_can_adjust_frame_rate(bool value);

  // bool can_set_frame_number = 10;
  void clear_can_set_frame_number();
  static const int kCanSetFrameNumberFieldNumber = 10;
  bool can_set_frame_number() const;
  void set_can_set_frame_number(bool value);

  // bool can_get_temperature = 11;
  void clear_can_get_temperature();
  static const int kCanGetTemperatureFieldNumber = 11;
  bool can_get_temperature() const;
  void set_can_get_temperature(bool value);

  // bool can_suspend = 12;
  void clear_can_suspend();
  static const int kCanSuspendFieldNumber = 12;
  bool can_suspend() const;
  void set_can_suspend(bool value);

  // bool can_reset = 13;
  void clear_can_reset();
  static const int kCanResetFieldNumber = 13;
  bool can_reset() const;
  void set_can_reset(bool value);

  // @@protoc_insertion_point(class_scope:CameraServer.CameraCapability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool can_shutdown_;
  bool can_open_;
  bool can_capture_async_;
  bool can_capture_;
  bool can_adjust_exposure_;
  bool can_adjust_gain_;
  bool can_adjust_gamma_;
  bool can_adjust_black_level_;
  bool can_adjust_frame_rate_;
  bool can_set_frame_number_;
  bool can_get_temperature_;
  bool can_suspend_;
  bool can_reset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string manufacture = 2;
  void clear_manufacture();
  static const int kManufactureFieldNumber = 2;
  const ::std::string& manufacture() const;
  void set_manufacture(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacture(::std::string&& value);
  #endif
  void set_manufacture(const char* value);
  void set_manufacture(const char* value, size_t size);
  ::std::string* mutable_manufacture();
  ::std::string* release_manufacture();
  void set_allocated_manufacture(::std::string* manufacture);

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string model = 4;
  void clear_model();
  static const int kModelFieldNumber = 4;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string serial = 6;
  void clear_serial();
  static const int kSerialFieldNumber = 6;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_serial(::std::string&& value);
  #endif
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // .CameraServer.AdapterInfo adapter = 1;
  bool has_adapter() const;
  void clear_adapter();
  static const int kAdapterFieldNumber = 1;
  private:
  const ::CameraServer::AdapterInfo& _internal_adapter() const;
  public:
  const ::CameraServer::AdapterInfo& adapter() const;
  ::CameraServer::AdapterInfo* release_adapter();
  ::CameraServer::AdapterInfo* mutable_adapter();
  void set_allocated_adapter(::CameraServer::AdapterInfo* adapter);

  // .CameraServer.CameraCapability capabilities = 7;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 7;
  private:
  const ::CameraServer::CameraCapability& _internal_capabilities() const;
  public:
  const ::CameraServer::CameraCapability& capabilities() const;
  ::CameraServer::CameraCapability* release_capabilities();
  ::CameraServer::CameraCapability* mutable_capabilities();
  void set_allocated_capabilities(::CameraServer::CameraCapability* capabilities);

  // @@protoc_insertion_point(class_scope:CameraServer.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacture_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::CameraServer::AdapterInfo* adapter_;
  ::CameraServer::CameraCapability* capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.DeviceListResponse) */ {
 public:
  DeviceListResponse();
  virtual ~DeviceListResponse();

  DeviceListResponse(const DeviceListResponse& from);

  inline DeviceListResponse& operator=(const DeviceListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceListResponse(DeviceListResponse&& from) noexcept
    : DeviceListResponse() {
    *this = ::std::move(from);
  }

  inline DeviceListResponse& operator=(DeviceListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceListResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceListResponse*>(
               &_DeviceListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeviceListResponse* other);
  friend void swap(DeviceListResponse& a, DeviceListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceListResponse* New() const final {
    return CreateMaybeMessage<DeviceListResponse>(NULL);
  }

  DeviceListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceListResponse& from);
  void MergeFrom(const DeviceListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CameraServer.DeviceInfo devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::CameraServer::DeviceInfo* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::CameraServer::DeviceInfo >*
      mutable_devices();
  const ::CameraServer::DeviceInfo& devices(int index) const;
  ::CameraServer::DeviceInfo* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::CameraServer::DeviceInfo >&
      devices() const;

  // @@protoc_insertion_point(class_scope:CameraServer.DeviceListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CameraServer::DeviceInfo > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.IdRequest) */ {
 public:
  IdRequest();
  virtual ~IdRequest();

  IdRequest(const IdRequest& from);

  inline IdRequest& operator=(const IdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdRequest(IdRequest&& from) noexcept
    : IdRequest() {
    *this = ::std::move(from);
  }

  inline IdRequest& operator=(IdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdRequest* internal_default_instance() {
    return reinterpret_cast<const IdRequest*>(
               &_IdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IdRequest* other);
  friend void swap(IdRequest& a, IdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdRequest* New() const final {
    return CreateMaybeMessage<IdRequest>(NULL);
  }

  IdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdRequest& from);
  void MergeFrom(const IdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:CameraServer.IdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Parameter* other);
  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(NULL);
  }

  Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // bool should_update = 1;
  void clear_should_update();
  static const int kShouldUpdateFieldNumber = 1;
  bool should_update() const;
  void set_should_update(bool value);

  // @@protoc_insertion_point(class_scope:CameraServer.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  bool should_update_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Configuration* other);
  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(NULL);
  }

  Configuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CameraServer.Parameter exposure = 1;
  bool has_exposure() const;
  void clear_exposure();
  static const int kExposureFieldNumber = 1;
  private:
  const ::CameraServer::Parameter& _internal_exposure() const;
  public:
  const ::CameraServer::Parameter& exposure() const;
  ::CameraServer::Parameter* release_exposure();
  ::CameraServer::Parameter* mutable_exposure();
  void set_allocated_exposure(::CameraServer::Parameter* exposure);

  // .CameraServer.Parameter frame_rate = 2;
  bool has_frame_rate() const;
  void clear_frame_rate();
  static const int kFrameRateFieldNumber = 2;
  private:
  const ::CameraServer::Parameter& _internal_frame_rate() const;
  public:
  const ::CameraServer::Parameter& frame_rate() const;
  ::CameraServer::Parameter* release_frame_rate();
  ::CameraServer::Parameter* mutable_frame_rate();
  void set_allocated_frame_rate(::CameraServer::Parameter* frame_rate);

  // .CameraServer.Parameter gain = 3;
  bool has_gain() const;
  void clear_gain();
  static const int kGainFieldNumber = 3;
  private:
  const ::CameraServer::Parameter& _internal_gain() const;
  public:
  const ::CameraServer::Parameter& gain() const;
  ::CameraServer::Parameter* release_gain();
  ::CameraServer::Parameter* mutable_gain();
  void set_allocated_gain(::CameraServer::Parameter* gain);

  // .CameraServer.Parameter black_level = 4;
  bool has_black_level() const;
  void clear_black_level();
  static const int kBlackLevelFieldNumber = 4;
  private:
  const ::CameraServer::Parameter& _internal_black_level() const;
  public:
  const ::CameraServer::Parameter& black_level() const;
  ::CameraServer::Parameter* release_black_level();
  ::CameraServer::Parameter* mutable_black_level();
  void set_allocated_black_level(::CameraServer::Parameter* black_level);

  // .CameraServer.Parameter gamma = 5;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 5;
  private:
  const ::CameraServer::Parameter& _internal_gamma() const;
  public:
  const ::CameraServer::Parameter& gamma() const;
  ::CameraServer::Parameter* release_gamma();
  ::CameraServer::Parameter* mutable_gamma();
  void set_allocated_gamma(::CameraServer::Parameter* gamma);

  // @@protoc_insertion_point(class_scope:CameraServer.Configuration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CameraServer::Parameter* exposure_;
  ::CameraServer::Parameter* frame_rate_;
  ::CameraServer::Parameter* gain_;
  ::CameraServer::Parameter* black_level_;
  ::CameraServer::Parameter* gamma_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigureRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.ConfigureRequest) */ {
 public:
  ConfigureRequest();
  virtual ~ConfigureRequest();

  ConfigureRequest(const ConfigureRequest& from);

  inline ConfigureRequest& operator=(const ConfigureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigureRequest(ConfigureRequest&& from) noexcept
    : ConfigureRequest() {
    *this = ::std::move(from);
  }

  inline ConfigureRequest& operator=(ConfigureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigureRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigureRequest*>(
               &_ConfigureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ConfigureRequest* other);
  friend void swap(ConfigureRequest& a, ConfigureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigureRequest* New() const final {
    return CreateMaybeMessage<ConfigureRequest>(NULL);
  }

  ConfigureRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigureRequest& from);
  void MergeFrom(const ConfigureRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CameraServer.IdRequest id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::CameraServer::IdRequest& _internal_id() const;
  public:
  const ::CameraServer::IdRequest& id() const;
  ::CameraServer::IdRequest* release_id();
  ::CameraServer::IdRequest* mutable_id();
  void set_allocated_id(::CameraServer::IdRequest* id);

  // .CameraServer.Configuration config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::CameraServer::Configuration& _internal_config() const;
  public:
  const ::CameraServer::Configuration& config() const;
  ::CameraServer::Configuration* release_config();
  ::CameraServer::Configuration* mutable_config();
  void set_allocated_config(::CameraServer::Configuration* config);

  // @@protoc_insertion_point(class_scope:CameraServer.ConfigureRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CameraServer::IdRequest* id_;
  ::CameraServer::Configuration* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 pixel_format = 6;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 6;
  ::google::protobuf::uint32 pixel_format() const;
  void set_pixel_format(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CameraServer.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 pixel_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.FrameStream) */ {
 public:
  FrameStream();
  virtual ~FrameStream();

  FrameStream(const FrameStream& from);

  inline FrameStream& operator=(const FrameStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameStream(FrameStream&& from) noexcept
    : FrameStream() {
    *this = ::std::move(from);
  }

  inline FrameStream& operator=(FrameStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameStream* internal_default_instance() {
    return reinterpret_cast<const FrameStream*>(
               &_FrameStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FrameStream* other);
  friend void swap(FrameStream& a, FrameStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameStream* New() const final {
    return CreateMaybeMessage<FrameStream>(NULL);
  }

  FrameStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameStream& from);
  void MergeFrom(const FrameStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CameraServer.Frame frames = 1;
  int frames_size() const;
  void clear_frames();
  static const int kFramesFieldNumber = 1;
  ::CameraServer::Frame* mutable_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::CameraServer::Frame >*
      mutable_frames();
  const ::CameraServer::Frame& frames(int index) const;
  ::CameraServer::Frame* add_frames();
  const ::google::protobuf::RepeatedPtrField< ::CameraServer::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:CameraServer.FrameStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CameraServer::Frame > frames_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.StreamingRequest) */ {
 public:
  StreamingRequest();
  virtual ~StreamingRequest();

  StreamingRequest(const StreamingRequest& from);

  inline StreamingRequest& operator=(const StreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamingRequest(StreamingRequest&& from) noexcept
    : StreamingRequest() {
    *this = ::std::move(from);
  }

  inline StreamingRequest& operator=(StreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingRequest*>(
               &_StreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(StreamingRequest* other);
  friend void swap(StreamingRequest& a, StreamingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamingRequest* New() const final {
    return CreateMaybeMessage<StreamingRequest>(NULL);
  }

  StreamingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamingRequest& from);
  void MergeFrom(const StreamingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CameraServer.IdRequest id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::CameraServer::IdRequest& _internal_id() const;
  public:
  const ::CameraServer::IdRequest& id() const;
  ::CameraServer::IdRequest* release_id();
  ::CameraServer::IdRequest* mutable_id();
  void set_allocated_id(::CameraServer::IdRequest* id);

  // uint64 number_frames = 2;
  void clear_number_frames();
  static const int kNumberFramesFieldNumber = 2;
  ::google::protobuf::uint64 number_frames() const;
  void set_number_frames(::google::protobuf::uint64 value);

  // uint64 batch_size = 4;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint64 batch_size() const;
  void set_batch_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CameraServer.StreamingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CameraServer::IdRequest* id_;
  ::google::protobuf::uint64 number_frames_;
  ::google::protobuf::uint64 batch_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(NULL);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double temperature = 1;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  double temperature() const;
  void set_temperature(double value);

  // bool opened = 2;
  void clear_opened();
  static const int kOpenedFieldNumber = 2;
  bool opened() const;
  void set_opened(bool value);

  // bool capturing = 3;
  void clear_capturing();
  static const int kCapturingFieldNumber = 3;
  bool capturing() const;
  void set_capturing(bool value);

  // @@protoc_insertion_point(class_scope:CameraServer.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double temperature_;
  bool opened_;
  bool capturing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceControlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraServer.DeviceControlRequest) */ {
 public:
  DeviceControlRequest();
  virtual ~DeviceControlRequest();

  DeviceControlRequest(const DeviceControlRequest& from);

  inline DeviceControlRequest& operator=(const DeviceControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceControlRequest(DeviceControlRequest&& from) noexcept
    : DeviceControlRequest() {
    *this = ::std::move(from);
  }

  inline DeviceControlRequest& operator=(DeviceControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceControlRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceControlRequest*>(
               &_DeviceControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeviceControlRequest* other);
  friend void swap(DeviceControlRequest& a, DeviceControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceControlRequest* New() const final {
    return CreateMaybeMessage<DeviceControlRequest>(NULL);
  }

  DeviceControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceControlRequest& from);
  void MergeFrom(const DeviceControlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CameraServer.IdRequest id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::CameraServer::IdRequest& _internal_id() const;
  public:
  const ::CameraServer::IdRequest& id() const;
  ::CameraServer::IdRequest* release_id();
  ::CameraServer::IdRequest* mutable_id();
  void set_allocated_id(::CameraServer::IdRequest* id);

  // .CameraServer.DeviceControlAction action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::CameraServer::DeviceControlAction action() const;
  void set_action(::CameraServer::DeviceControlAction value);

  // @@protoc_insertion_point(class_scope:CameraServer.DeviceControlRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CameraServer::IdRequest* id_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fdefinitions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdapterCapability

// bool should_shut_down = 1;
inline void AdapterCapability::clear_should_shut_down() {
  should_shut_down_ = false;
}
inline bool AdapterCapability::should_shut_down() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterCapability.should_shut_down)
  return should_shut_down_;
}
inline void AdapterCapability::set_should_shut_down(bool value) {
  
  should_shut_down_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.AdapterCapability.should_shut_down)
}

// -------------------------------------------------------------------

// AdapterInfo

// string name = 1;
inline void AdapterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdapterInfo::name() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterInfo.name)
  return name_.GetNoArena();
}
inline void AdapterInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.AdapterInfo.name)
}
#if LANG_CXX11
inline void AdapterInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.AdapterInfo.name)
}
#endif
inline void AdapterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.AdapterInfo.name)
}
inline void AdapterInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.AdapterInfo.name)
}
inline ::std::string* AdapterInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.AdapterInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdapterInfo::release_name() {
  // @@protoc_insertion_point(field_release:CameraServer.AdapterInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdapterInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.AdapterInfo.name)
}

// string version = 2;
inline void AdapterInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdapterInfo::version() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterInfo.version)
  return version_.GetNoArena();
}
inline void AdapterInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.AdapterInfo.version)
}
#if LANG_CXX11
inline void AdapterInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.AdapterInfo.version)
}
#endif
inline void AdapterInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.AdapterInfo.version)
}
inline void AdapterInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.AdapterInfo.version)
}
inline ::std::string* AdapterInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.AdapterInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdapterInfo::release_version() {
  // @@protoc_insertion_point(field_release:CameraServer.AdapterInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdapterInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.AdapterInfo.version)
}

// string description = 3;
inline void AdapterInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdapterInfo::description() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterInfo.description)
  return description_.GetNoArena();
}
inline void AdapterInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.AdapterInfo.description)
}
#if LANG_CXX11
inline void AdapterInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.AdapterInfo.description)
}
#endif
inline void AdapterInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.AdapterInfo.description)
}
inline void AdapterInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.AdapterInfo.description)
}
inline ::std::string* AdapterInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.AdapterInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdapterInfo::release_description() {
  // @@protoc_insertion_point(field_release:CameraServer.AdapterInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdapterInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.AdapterInfo.description)
}

// bool in_use = 4;
inline void AdapterInfo::clear_in_use() {
  in_use_ = false;
}
inline bool AdapterInfo::in_use() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterInfo.in_use)
  return in_use_;
}
inline void AdapterInfo::set_in_use(bool value) {
  
  in_use_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.AdapterInfo.in_use)
}

// .CameraServer.AdapterCapability capability = 5;
inline bool AdapterInfo::has_capability() const {
  return this != internal_default_instance() && capability_ != NULL;
}
inline void AdapterInfo::clear_capability() {
  if (GetArenaNoVirtual() == NULL && capability_ != NULL) {
    delete capability_;
  }
  capability_ = NULL;
}
inline const ::CameraServer::AdapterCapability& AdapterInfo::_internal_capability() const {
  return *capability_;
}
inline const ::CameraServer::AdapterCapability& AdapterInfo::capability() const {
  const ::CameraServer::AdapterCapability* p = capability_;
  // @@protoc_insertion_point(field_get:CameraServer.AdapterInfo.capability)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::AdapterCapability*>(
      &::CameraServer::_AdapterCapability_default_instance_);
}
inline ::CameraServer::AdapterCapability* AdapterInfo::release_capability() {
  // @@protoc_insertion_point(field_release:CameraServer.AdapterInfo.capability)
  
  ::CameraServer::AdapterCapability* temp = capability_;
  capability_ = NULL;
  return temp;
}
inline ::CameraServer::AdapterCapability* AdapterInfo::mutable_capability() {
  
  if (capability_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::AdapterCapability>(GetArenaNoVirtual());
    capability_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.AdapterInfo.capability)
  return capability_;
}
inline void AdapterInfo::set_allocated_capability(::CameraServer::AdapterCapability* capability) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capability_;
  }
  if (capability) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capability = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capability, submessage_arena);
    }
    
  } else {
    
  }
  capability_ = capability;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.AdapterInfo.capability)
}

// -------------------------------------------------------------------

// AvailableAdaptersResponse

// repeated .CameraServer.AdapterInfo adapters = 1;
inline int AvailableAdaptersResponse::adapters_size() const {
  return adapters_.size();
}
inline void AvailableAdaptersResponse::clear_adapters() {
  adapters_.Clear();
}
inline ::CameraServer::AdapterInfo* AvailableAdaptersResponse::mutable_adapters(int index) {
  // @@protoc_insertion_point(field_mutable:CameraServer.AvailableAdaptersResponse.adapters)
  return adapters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CameraServer::AdapterInfo >*
AvailableAdaptersResponse::mutable_adapters() {
  // @@protoc_insertion_point(field_mutable_list:CameraServer.AvailableAdaptersResponse.adapters)
  return &adapters_;
}
inline const ::CameraServer::AdapterInfo& AvailableAdaptersResponse::adapters(int index) const {
  // @@protoc_insertion_point(field_get:CameraServer.AvailableAdaptersResponse.adapters)
  return adapters_.Get(index);
}
inline ::CameraServer::AdapterInfo* AvailableAdaptersResponse::add_adapters() {
  // @@protoc_insertion_point(field_add:CameraServer.AvailableAdaptersResponse.adapters)
  return adapters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CameraServer::AdapterInfo >&
AvailableAdaptersResponse::adapters() const {
  // @@protoc_insertion_point(field_list:CameraServer.AvailableAdaptersResponse.adapters)
  return adapters_;
}

// -------------------------------------------------------------------

// AdapterRequest

// string name = 1;
inline void AdapterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdapterRequest::name() const {
  // @@protoc_insertion_point(field_get:CameraServer.AdapterRequest.name)
  return name_.GetNoArena();
}
inline void AdapterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.AdapterRequest.name)
}
#if LANG_CXX11
inline void AdapterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.AdapterRequest.name)
}
#endif
inline void AdapterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.AdapterRequest.name)
}
inline void AdapterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.AdapterRequest.name)
}
inline ::std::string* AdapterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.AdapterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdapterRequest::release_name() {
  // @@protoc_insertion_point(field_release:CameraServer.AdapterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdapterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.AdapterRequest.name)
}

// -------------------------------------------------------------------

// CameraCapability

// bool can_shutdown = 1;
inline void CameraCapability::clear_can_shutdown() {
  can_shutdown_ = false;
}
inline bool CameraCapability::can_shutdown() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_shutdown)
  return can_shutdown_;
}
inline void CameraCapability::set_can_shutdown(bool value) {
  
  can_shutdown_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_shutdown)
}

// bool can_open = 2;
inline void CameraCapability::clear_can_open() {
  can_open_ = false;
}
inline bool CameraCapability::can_open() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_open)
  return can_open_;
}
inline void CameraCapability::set_can_open(bool value) {
  
  can_open_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_open)
}

// bool can_capture_async = 3;
inline void CameraCapability::clear_can_capture_async() {
  can_capture_async_ = false;
}
inline bool CameraCapability::can_capture_async() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_capture_async)
  return can_capture_async_;
}
inline void CameraCapability::set_can_capture_async(bool value) {
  
  can_capture_async_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_capture_async)
}

// bool can_capture = 4;
inline void CameraCapability::clear_can_capture() {
  can_capture_ = false;
}
inline bool CameraCapability::can_capture() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_capture)
  return can_capture_;
}
inline void CameraCapability::set_can_capture(bool value) {
  
  can_capture_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_capture)
}

// bool can_adjust_exposure = 5;
inline void CameraCapability::clear_can_adjust_exposure() {
  can_adjust_exposure_ = false;
}
inline bool CameraCapability::can_adjust_exposure() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_adjust_exposure)
  return can_adjust_exposure_;
}
inline void CameraCapability::set_can_adjust_exposure(bool value) {
  
  can_adjust_exposure_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_adjust_exposure)
}

// bool can_adjust_gain = 6;
inline void CameraCapability::clear_can_adjust_gain() {
  can_adjust_gain_ = false;
}
inline bool CameraCapability::can_adjust_gain() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_adjust_gain)
  return can_adjust_gain_;
}
inline void CameraCapability::set_can_adjust_gain(bool value) {
  
  can_adjust_gain_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_adjust_gain)
}

// bool can_adjust_gamma = 7;
inline void CameraCapability::clear_can_adjust_gamma() {
  can_adjust_gamma_ = false;
}
inline bool CameraCapability::can_adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_adjust_gamma)
  return can_adjust_gamma_;
}
inline void CameraCapability::set_can_adjust_gamma(bool value) {
  
  can_adjust_gamma_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_adjust_gamma)
}

// bool can_adjust_black_level = 8;
inline void CameraCapability::clear_can_adjust_black_level() {
  can_adjust_black_level_ = false;
}
inline bool CameraCapability::can_adjust_black_level() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_adjust_black_level)
  return can_adjust_black_level_;
}
inline void CameraCapability::set_can_adjust_black_level(bool value) {
  
  can_adjust_black_level_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_adjust_black_level)
}

// bool can_adjust_frame_rate = 9;
inline void CameraCapability::clear_can_adjust_frame_rate() {
  can_adjust_frame_rate_ = false;
}
inline bool CameraCapability::can_adjust_frame_rate() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_adjust_frame_rate)
  return can_adjust_frame_rate_;
}
inline void CameraCapability::set_can_adjust_frame_rate(bool value) {
  
  can_adjust_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_adjust_frame_rate)
}

// bool can_set_frame_number = 10;
inline void CameraCapability::clear_can_set_frame_number() {
  can_set_frame_number_ = false;
}
inline bool CameraCapability::can_set_frame_number() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_set_frame_number)
  return can_set_frame_number_;
}
inline void CameraCapability::set_can_set_frame_number(bool value) {
  
  can_set_frame_number_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_set_frame_number)
}

// bool can_get_temperature = 11;
inline void CameraCapability::clear_can_get_temperature() {
  can_get_temperature_ = false;
}
inline bool CameraCapability::can_get_temperature() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_get_temperature)
  return can_get_temperature_;
}
inline void CameraCapability::set_can_get_temperature(bool value) {
  
  can_get_temperature_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_get_temperature)
}

// bool can_suspend = 12;
inline void CameraCapability::clear_can_suspend() {
  can_suspend_ = false;
}
inline bool CameraCapability::can_suspend() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_suspend)
  return can_suspend_;
}
inline void CameraCapability::set_can_suspend(bool value) {
  
  can_suspend_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_suspend)
}

// bool can_reset = 13;
inline void CameraCapability::clear_can_reset() {
  can_reset_ = false;
}
inline bool CameraCapability::can_reset() const {
  // @@protoc_insertion_point(field_get:CameraServer.CameraCapability.can_reset)
  return can_reset_;
}
inline void CameraCapability::set_can_reset(bool value) {
  
  can_reset_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.CameraCapability.can_reset)
}

// -------------------------------------------------------------------

// DeviceInfo

// .CameraServer.AdapterInfo adapter = 1;
inline bool DeviceInfo::has_adapter() const {
  return this != internal_default_instance() && adapter_ != NULL;
}
inline void DeviceInfo::clear_adapter() {
  if (GetArenaNoVirtual() == NULL && adapter_ != NULL) {
    delete adapter_;
  }
  adapter_ = NULL;
}
inline const ::CameraServer::AdapterInfo& DeviceInfo::_internal_adapter() const {
  return *adapter_;
}
inline const ::CameraServer::AdapterInfo& DeviceInfo::adapter() const {
  const ::CameraServer::AdapterInfo* p = adapter_;
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.adapter)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::AdapterInfo*>(
      &::CameraServer::_AdapterInfo_default_instance_);
}
inline ::CameraServer::AdapterInfo* DeviceInfo::release_adapter() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.adapter)
  
  ::CameraServer::AdapterInfo* temp = adapter_;
  adapter_ = NULL;
  return temp;
}
inline ::CameraServer::AdapterInfo* DeviceInfo::mutable_adapter() {
  
  if (adapter_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::AdapterInfo>(GetArenaNoVirtual());
    adapter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.adapter)
  return adapter_;
}
inline void DeviceInfo::set_allocated_adapter(::CameraServer::AdapterInfo* adapter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adapter_;
  }
  if (adapter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      adapter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adapter, submessage_arena);
    }
    
  } else {
    
  }
  adapter_ = adapter;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.adapter)
}

// string manufacture = 2;
inline void DeviceInfo::clear_manufacture() {
  manufacture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::manufacture() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.manufacture)
  return manufacture_.GetNoArena();
}
inline void DeviceInfo::set_manufacture(const ::std::string& value) {
  
  manufacture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.DeviceInfo.manufacture)
}
#if LANG_CXX11
inline void DeviceInfo::set_manufacture(::std::string&& value) {
  
  manufacture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.DeviceInfo.manufacture)
}
#endif
inline void DeviceInfo::set_manufacture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.DeviceInfo.manufacture)
}
inline void DeviceInfo::set_manufacture(const char* value, size_t size) {
  
  manufacture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.DeviceInfo.manufacture)
}
inline ::std::string* DeviceInfo::mutable_manufacture() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.manufacture)
  return manufacture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_manufacture() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.manufacture)
  
  return manufacture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_manufacture(::std::string* manufacture) {
  if (manufacture != NULL) {
    
  } else {
    
  }
  manufacture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacture);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.manufacture)
}

// string id = 3;
inline void DeviceInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::id() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.id)
  return id_.GetNoArena();
}
inline void DeviceInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.DeviceInfo.id)
}
#if LANG_CXX11
inline void DeviceInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.DeviceInfo.id)
}
#endif
inline void DeviceInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.DeviceInfo.id)
}
inline void DeviceInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.DeviceInfo.id)
}
inline ::std::string* DeviceInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_id() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.id)
}

// string model = 4;
inline void DeviceInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.model)
  return model_.GetNoArena();
}
inline void DeviceInfo::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.DeviceInfo.model)
}
#if LANG_CXX11
inline void DeviceInfo::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.DeviceInfo.model)
}
#endif
inline void DeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.DeviceInfo.model)
}
inline ::std::string* DeviceInfo::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.model)
}

// string version = 5;
inline void DeviceInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::version() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.version)
  return version_.GetNoArena();
}
inline void DeviceInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.DeviceInfo.version)
}
#if LANG_CXX11
inline void DeviceInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.DeviceInfo.version)
}
#endif
inline void DeviceInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.DeviceInfo.version)
}
inline void DeviceInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.DeviceInfo.version)
}
inline ::std::string* DeviceInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_version() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.version)
}

// string serial = 6;
inline void DeviceInfo::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::serial() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.serial)
  return serial_.GetNoArena();
}
inline void DeviceInfo::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.DeviceInfo.serial)
}
#if LANG_CXX11
inline void DeviceInfo::set_serial(::std::string&& value) {
  
  serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.DeviceInfo.serial)
}
#endif
inline void DeviceInfo::set_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.DeviceInfo.serial)
}
inline void DeviceInfo::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.DeviceInfo.serial)
}
inline ::std::string* DeviceInfo::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_serial() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.serial)
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.serial)
}

// .CameraServer.CameraCapability capabilities = 7;
inline bool DeviceInfo::has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != NULL;
}
inline void DeviceInfo::clear_capabilities() {
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) {
    delete capabilities_;
  }
  capabilities_ = NULL;
}
inline const ::CameraServer::CameraCapability& DeviceInfo::_internal_capabilities() const {
  return *capabilities_;
}
inline const ::CameraServer::CameraCapability& DeviceInfo::capabilities() const {
  const ::CameraServer::CameraCapability* p = capabilities_;
  // @@protoc_insertion_point(field_get:CameraServer.DeviceInfo.capabilities)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::CameraCapability*>(
      &::CameraServer::_CameraCapability_default_instance_);
}
inline ::CameraServer::CameraCapability* DeviceInfo::release_capabilities() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceInfo.capabilities)
  
  ::CameraServer::CameraCapability* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline ::CameraServer::CameraCapability* DeviceInfo::mutable_capabilities() {
  
  if (capabilities_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::CameraCapability>(GetArenaNoVirtual());
    capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceInfo.capabilities)
  return capabilities_;
}
inline void DeviceInfo::set_allocated_capabilities(::CameraServer::CameraCapability* capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capabilities_;
  }
  if (capabilities) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceInfo.capabilities)
}

// -------------------------------------------------------------------

// DeviceListResponse

// repeated .CameraServer.DeviceInfo devices = 1;
inline int DeviceListResponse::devices_size() const {
  return devices_.size();
}
inline void DeviceListResponse::clear_devices() {
  devices_.Clear();
}
inline ::CameraServer::DeviceInfo* DeviceListResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceListResponse.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CameraServer::DeviceInfo >*
DeviceListResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CameraServer.DeviceListResponse.devices)
  return &devices_;
}
inline const ::CameraServer::DeviceInfo& DeviceListResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceListResponse.devices)
  return devices_.Get(index);
}
inline ::CameraServer::DeviceInfo* DeviceListResponse::add_devices() {
  // @@protoc_insertion_point(field_add:CameraServer.DeviceListResponse.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CameraServer::DeviceInfo >&
DeviceListResponse::devices() const {
  // @@protoc_insertion_point(field_list:CameraServer.DeviceListResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// IdRequest

// string id = 1;
inline void IdRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdRequest::id() const {
  // @@protoc_insertion_point(field_get:CameraServer.IdRequest.id)
  return id_.GetNoArena();
}
inline void IdRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.IdRequest.id)
}
#if LANG_CXX11
inline void IdRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.IdRequest.id)
}
#endif
inline void IdRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.IdRequest.id)
}
inline void IdRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.IdRequest.id)
}
inline ::std::string* IdRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.IdRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdRequest::release_id() {
  // @@protoc_insertion_point(field_release:CameraServer.IdRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.IdRequest.id)
}

// -------------------------------------------------------------------

// Parameter

// bool should_update = 1;
inline void Parameter::clear_should_update() {
  should_update_ = false;
}
inline bool Parameter::should_update() const {
  // @@protoc_insertion_point(field_get:CameraServer.Parameter.should_update)
  return should_update_;
}
inline void Parameter::set_should_update(bool value) {
  
  should_update_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Parameter.should_update)
}

// double value = 2;
inline void Parameter::clear_value() {
  value_ = 0;
}
inline double Parameter::value() const {
  // @@protoc_insertion_point(field_get:CameraServer.Parameter.value)
  return value_;
}
inline void Parameter::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Parameter.value)
}

// -------------------------------------------------------------------

// Configuration

// .CameraServer.Parameter exposure = 1;
inline bool Configuration::has_exposure() const {
  return this != internal_default_instance() && exposure_ != NULL;
}
inline void Configuration::clear_exposure() {
  if (GetArenaNoVirtual() == NULL && exposure_ != NULL) {
    delete exposure_;
  }
  exposure_ = NULL;
}
inline const ::CameraServer::Parameter& Configuration::_internal_exposure() const {
  return *exposure_;
}
inline const ::CameraServer::Parameter& Configuration::exposure() const {
  const ::CameraServer::Parameter* p = exposure_;
  // @@protoc_insertion_point(field_get:CameraServer.Configuration.exposure)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Parameter*>(
      &::CameraServer::_Parameter_default_instance_);
}
inline ::CameraServer::Parameter* Configuration::release_exposure() {
  // @@protoc_insertion_point(field_release:CameraServer.Configuration.exposure)
  
  ::CameraServer::Parameter* temp = exposure_;
  exposure_ = NULL;
  return temp;
}
inline ::CameraServer::Parameter* Configuration::mutable_exposure() {
  
  if (exposure_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Parameter>(GetArenaNoVirtual());
    exposure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Configuration.exposure)
  return exposure_;
}
inline void Configuration::set_allocated_exposure(::CameraServer::Parameter* exposure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exposure_;
  }
  if (exposure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exposure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exposure, submessage_arena);
    }
    
  } else {
    
  }
  exposure_ = exposure;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Configuration.exposure)
}

// .CameraServer.Parameter frame_rate = 2;
inline bool Configuration::has_frame_rate() const {
  return this != internal_default_instance() && frame_rate_ != NULL;
}
inline void Configuration::clear_frame_rate() {
  if (GetArenaNoVirtual() == NULL && frame_rate_ != NULL) {
    delete frame_rate_;
  }
  frame_rate_ = NULL;
}
inline const ::CameraServer::Parameter& Configuration::_internal_frame_rate() const {
  return *frame_rate_;
}
inline const ::CameraServer::Parameter& Configuration::frame_rate() const {
  const ::CameraServer::Parameter* p = frame_rate_;
  // @@protoc_insertion_point(field_get:CameraServer.Configuration.frame_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Parameter*>(
      &::CameraServer::_Parameter_default_instance_);
}
inline ::CameraServer::Parameter* Configuration::release_frame_rate() {
  // @@protoc_insertion_point(field_release:CameraServer.Configuration.frame_rate)
  
  ::CameraServer::Parameter* temp = frame_rate_;
  frame_rate_ = NULL;
  return temp;
}
inline ::CameraServer::Parameter* Configuration::mutable_frame_rate() {
  
  if (frame_rate_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Parameter>(GetArenaNoVirtual());
    frame_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Configuration.frame_rate)
  return frame_rate_;
}
inline void Configuration::set_allocated_frame_rate(::CameraServer::Parameter* frame_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_rate_;
  }
  if (frame_rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_rate, submessage_arena);
    }
    
  } else {
    
  }
  frame_rate_ = frame_rate;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Configuration.frame_rate)
}

// .CameraServer.Parameter gain = 3;
inline bool Configuration::has_gain() const {
  return this != internal_default_instance() && gain_ != NULL;
}
inline void Configuration::clear_gain() {
  if (GetArenaNoVirtual() == NULL && gain_ != NULL) {
    delete gain_;
  }
  gain_ = NULL;
}
inline const ::CameraServer::Parameter& Configuration::_internal_gain() const {
  return *gain_;
}
inline const ::CameraServer::Parameter& Configuration::gain() const {
  const ::CameraServer::Parameter* p = gain_;
  // @@protoc_insertion_point(field_get:CameraServer.Configuration.gain)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Parameter*>(
      &::CameraServer::_Parameter_default_instance_);
}
inline ::CameraServer::Parameter* Configuration::release_gain() {
  // @@protoc_insertion_point(field_release:CameraServer.Configuration.gain)
  
  ::CameraServer::Parameter* temp = gain_;
  gain_ = NULL;
  return temp;
}
inline ::CameraServer::Parameter* Configuration::mutable_gain() {
  
  if (gain_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Parameter>(GetArenaNoVirtual());
    gain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Configuration.gain)
  return gain_;
}
inline void Configuration::set_allocated_gain(::CameraServer::Parameter* gain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gain_;
  }
  if (gain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gain, submessage_arena);
    }
    
  } else {
    
  }
  gain_ = gain;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Configuration.gain)
}

// .CameraServer.Parameter black_level = 4;
inline bool Configuration::has_black_level() const {
  return this != internal_default_instance() && black_level_ != NULL;
}
inline void Configuration::clear_black_level() {
  if (GetArenaNoVirtual() == NULL && black_level_ != NULL) {
    delete black_level_;
  }
  black_level_ = NULL;
}
inline const ::CameraServer::Parameter& Configuration::_internal_black_level() const {
  return *black_level_;
}
inline const ::CameraServer::Parameter& Configuration::black_level() const {
  const ::CameraServer::Parameter* p = black_level_;
  // @@protoc_insertion_point(field_get:CameraServer.Configuration.black_level)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Parameter*>(
      &::CameraServer::_Parameter_default_instance_);
}
inline ::CameraServer::Parameter* Configuration::release_black_level() {
  // @@protoc_insertion_point(field_release:CameraServer.Configuration.black_level)
  
  ::CameraServer::Parameter* temp = black_level_;
  black_level_ = NULL;
  return temp;
}
inline ::CameraServer::Parameter* Configuration::mutable_black_level() {
  
  if (black_level_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Parameter>(GetArenaNoVirtual());
    black_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Configuration.black_level)
  return black_level_;
}
inline void Configuration::set_allocated_black_level(::CameraServer::Parameter* black_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete black_level_;
  }
  if (black_level) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      black_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, black_level, submessage_arena);
    }
    
  } else {
    
  }
  black_level_ = black_level;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Configuration.black_level)
}

// .CameraServer.Parameter gamma = 5;
inline bool Configuration::has_gamma() const {
  return this != internal_default_instance() && gamma_ != NULL;
}
inline void Configuration::clear_gamma() {
  if (GetArenaNoVirtual() == NULL && gamma_ != NULL) {
    delete gamma_;
  }
  gamma_ = NULL;
}
inline const ::CameraServer::Parameter& Configuration::_internal_gamma() const {
  return *gamma_;
}
inline const ::CameraServer::Parameter& Configuration::gamma() const {
  const ::CameraServer::Parameter* p = gamma_;
  // @@protoc_insertion_point(field_get:CameraServer.Configuration.gamma)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Parameter*>(
      &::CameraServer::_Parameter_default_instance_);
}
inline ::CameraServer::Parameter* Configuration::release_gamma() {
  // @@protoc_insertion_point(field_release:CameraServer.Configuration.gamma)
  
  ::CameraServer::Parameter* temp = gamma_;
  gamma_ = NULL;
  return temp;
}
inline ::CameraServer::Parameter* Configuration::mutable_gamma() {
  
  if (gamma_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Parameter>(GetArenaNoVirtual());
    gamma_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Configuration.gamma)
  return gamma_;
}
inline void Configuration::set_allocated_gamma(::CameraServer::Parameter* gamma) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gamma_;
  }
  if (gamma) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gamma = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gamma, submessage_arena);
    }
    
  } else {
    
  }
  gamma_ = gamma;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Configuration.gamma)
}

// -------------------------------------------------------------------

// ConfigureRequest

// .CameraServer.IdRequest id = 1;
inline bool ConfigureRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ConfigureRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::CameraServer::IdRequest& ConfigureRequest::_internal_id() const {
  return *id_;
}
inline const ::CameraServer::IdRequest& ConfigureRequest::id() const {
  const ::CameraServer::IdRequest* p = id_;
  // @@protoc_insertion_point(field_get:CameraServer.ConfigureRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::IdRequest*>(
      &::CameraServer::_IdRequest_default_instance_);
}
inline ::CameraServer::IdRequest* ConfigureRequest::release_id() {
  // @@protoc_insertion_point(field_release:CameraServer.ConfigureRequest.id)
  
  ::CameraServer::IdRequest* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::CameraServer::IdRequest* ConfigureRequest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::IdRequest>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.ConfigureRequest.id)
  return id_;
}
inline void ConfigureRequest::set_allocated_id(::CameraServer::IdRequest* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.ConfigureRequest.id)
}

// .CameraServer.Configuration config = 2;
inline bool ConfigureRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void ConfigureRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::CameraServer::Configuration& ConfigureRequest::_internal_config() const {
  return *config_;
}
inline const ::CameraServer::Configuration& ConfigureRequest::config() const {
  const ::CameraServer::Configuration* p = config_;
  // @@protoc_insertion_point(field_get:CameraServer.ConfigureRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::Configuration*>(
      &::CameraServer::_Configuration_default_instance_);
}
inline ::CameraServer::Configuration* ConfigureRequest::release_config() {
  // @@protoc_insertion_point(field_release:CameraServer.ConfigureRequest.config)
  
  ::CameraServer::Configuration* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::CameraServer::Configuration* ConfigureRequest::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::Configuration>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.ConfigureRequest.config)
  return config_;
}
inline void ConfigureRequest::set_allocated_config(::CameraServer::Configuration* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.ConfigureRequest.config)
}

// -------------------------------------------------------------------

// Frame

// .google.protobuf.Timestamp timestamp = 1;
inline bool Frame::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Frame::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& Frame::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:CameraServer.Frame.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Frame::release_timestamp() {
  // @@protoc_insertion_point(field_release:CameraServer.Frame.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Frame::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.Frame.timestamp)
  return timestamp_;
}
inline void Frame::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Frame.timestamp)
}

// uint64 id = 2;
inline void Frame::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::id() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.id)
  return id_;
}
inline void Frame::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Frame.id)
}

// uint32 size = 3;
inline void Frame::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 Frame::size() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.size)
  return size_;
}
inline void Frame::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Frame.size)
}

// uint32 height = 4;
inline void Frame::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Frame::height() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.height)
  return height_;
}
inline void Frame::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Frame.height)
}

// uint32 width = 5;
inline void Frame::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Frame::width() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.width)
  return width_;
}
inline void Frame::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Frame.width)
}

// uint32 pixel_format = 6;
inline void Frame::clear_pixel_format() {
  pixel_format_ = 0u;
}
inline ::google::protobuf::uint32 Frame::pixel_format() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.pixel_format)
  return pixel_format_;
}
inline void Frame::set_pixel_format(::google::protobuf::uint32 value) {
  
  pixel_format_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Frame.pixel_format)
}

// bytes data = 7;
inline void Frame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Frame::data() const {
  // @@protoc_insertion_point(field_get:CameraServer.Frame.data)
  return data_.GetNoArena();
}
inline void Frame::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CameraServer.Frame.data)
}
#if LANG_CXX11
inline void Frame::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CameraServer.Frame.data)
}
#endif
inline void Frame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CameraServer.Frame.data)
}
inline void Frame::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CameraServer.Frame.data)
}
inline ::std::string* Frame::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:CameraServer.Frame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame::release_data() {
  // @@protoc_insertion_point(field_release:CameraServer.Frame.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CameraServer.Frame.data)
}

// -------------------------------------------------------------------

// FrameStream

// repeated .CameraServer.Frame frames = 1;
inline int FrameStream::frames_size() const {
  return frames_.size();
}
inline void FrameStream::clear_frames() {
  frames_.Clear();
}
inline ::CameraServer::Frame* FrameStream::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:CameraServer.FrameStream.frames)
  return frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CameraServer::Frame >*
FrameStream::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:CameraServer.FrameStream.frames)
  return &frames_;
}
inline const ::CameraServer::Frame& FrameStream::frames(int index) const {
  // @@protoc_insertion_point(field_get:CameraServer.FrameStream.frames)
  return frames_.Get(index);
}
inline ::CameraServer::Frame* FrameStream::add_frames() {
  // @@protoc_insertion_point(field_add:CameraServer.FrameStream.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CameraServer::Frame >&
FrameStream::frames() const {
  // @@protoc_insertion_point(field_list:CameraServer.FrameStream.frames)
  return frames_;
}

// -------------------------------------------------------------------

// StreamingRequest

// .CameraServer.IdRequest id = 1;
inline bool StreamingRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void StreamingRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::CameraServer::IdRequest& StreamingRequest::_internal_id() const {
  return *id_;
}
inline const ::CameraServer::IdRequest& StreamingRequest::id() const {
  const ::CameraServer::IdRequest* p = id_;
  // @@protoc_insertion_point(field_get:CameraServer.StreamingRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::IdRequest*>(
      &::CameraServer::_IdRequest_default_instance_);
}
inline ::CameraServer::IdRequest* StreamingRequest::release_id() {
  // @@protoc_insertion_point(field_release:CameraServer.StreamingRequest.id)
  
  ::CameraServer::IdRequest* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::CameraServer::IdRequest* StreamingRequest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::IdRequest>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.StreamingRequest.id)
  return id_;
}
inline void StreamingRequest::set_allocated_id(::CameraServer::IdRequest* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.StreamingRequest.id)
}

// uint64 number_frames = 2;
inline void StreamingRequest::clear_number_frames() {
  number_frames_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StreamingRequest::number_frames() const {
  // @@protoc_insertion_point(field_get:CameraServer.StreamingRequest.number_frames)
  return number_frames_;
}
inline void StreamingRequest::set_number_frames(::google::protobuf::uint64 value) {
  
  number_frames_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.StreamingRequest.number_frames)
}

// uint64 batch_size = 4;
inline void StreamingRequest::clear_batch_size() {
  batch_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StreamingRequest::batch_size() const {
  // @@protoc_insertion_point(field_get:CameraServer.StreamingRequest.batch_size)
  return batch_size_;
}
inline void StreamingRequest::set_batch_size(::google::protobuf::uint64 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.StreamingRequest.batch_size)
}

// -------------------------------------------------------------------

// Status

// double temperature = 1;
inline void Status::clear_temperature() {
  temperature_ = 0;
}
inline double Status::temperature() const {
  // @@protoc_insertion_point(field_get:CameraServer.Status.temperature)
  return temperature_;
}
inline void Status::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Status.temperature)
}

// bool opened = 2;
inline void Status::clear_opened() {
  opened_ = false;
}
inline bool Status::opened() const {
  // @@protoc_insertion_point(field_get:CameraServer.Status.opened)
  return opened_;
}
inline void Status::set_opened(bool value) {
  
  opened_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Status.opened)
}

// bool capturing = 3;
inline void Status::clear_capturing() {
  capturing_ = false;
}
inline bool Status::capturing() const {
  // @@protoc_insertion_point(field_get:CameraServer.Status.capturing)
  return capturing_;
}
inline void Status::set_capturing(bool value) {
  
  capturing_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.Status.capturing)
}

// -------------------------------------------------------------------

// DeviceControlRequest

// .CameraServer.IdRequest id = 1;
inline bool DeviceControlRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void DeviceControlRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::CameraServer::IdRequest& DeviceControlRequest::_internal_id() const {
  return *id_;
}
inline const ::CameraServer::IdRequest& DeviceControlRequest::id() const {
  const ::CameraServer::IdRequest* p = id_;
  // @@protoc_insertion_point(field_get:CameraServer.DeviceControlRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraServer::IdRequest*>(
      &::CameraServer::_IdRequest_default_instance_);
}
inline ::CameraServer::IdRequest* DeviceControlRequest::release_id() {
  // @@protoc_insertion_point(field_release:CameraServer.DeviceControlRequest.id)
  
  ::CameraServer::IdRequest* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::CameraServer::IdRequest* DeviceControlRequest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraServer::IdRequest>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CameraServer.DeviceControlRequest.id)
  return id_;
}
inline void DeviceControlRequest::set_allocated_id(::CameraServer::IdRequest* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:CameraServer.DeviceControlRequest.id)
}

// .CameraServer.DeviceControlAction action = 2;
inline void DeviceControlRequest::clear_action() {
  action_ = 0;
}
inline ::CameraServer::DeviceControlAction DeviceControlRequest::action() const {
  // @@protoc_insertion_point(field_get:CameraServer.DeviceControlRequest.action)
  return static_cast< ::CameraServer::DeviceControlAction >(action_);
}
inline void DeviceControlRequest::set_action(::CameraServer::DeviceControlAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:CameraServer.DeviceControlRequest.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CameraServer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CameraServer::DeviceControlAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CameraServer::DeviceControlAction>() {
  return ::CameraServer::DeviceControlAction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_camera_5fdefinitions_2eproto
