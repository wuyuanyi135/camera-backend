// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_service.proto
#ifndef GRPC_camera_5fservice_2eproto__INCLUDED
#define GRPC_camera_5fservice_2eproto__INCLUDED

#include "camera_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mvcam {

// The capabilities should be checked and implemented by the frontend. However, in the GRPC layer, the capabilities should also be enforced.
class MicroVisionCameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "mvcam.MicroVisionCameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get the list of drivers
    virtual ::grpc::Status GetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mvcam::AvailableAdaptersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>> AsyncGetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>>(AsyncGetAvailableAdaptersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>> PrepareAsyncGetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>>(PrepareAsyncGetAvailableAdaptersRaw(context, request, cq));
    }
    // Get devices with the adapter selector. If not provided, all devices are listed.
    // The requested adapter (or all) should be updated upon this invocation.
    // This function will update the id-map if cached.
    virtual ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::mvcam::DeviceListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>> AsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    // Get device descriptor by id. This method is rarely used. Query is mainly performed by the framework.
    // The id will be cached by framework. The GetDevices function will invalidate the cache.
    virtual ::grpc::Status QueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::DeviceInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>> AsyncQueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>>(AsyncQueryDeviceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>> PrepareAsyncQueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>>(PrepareAsyncQueryDeviceByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncOpenCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncOpenCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncShutdownCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncShutdownCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncConfigureCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncConfigureCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Configuration* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>> AsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>>(AsyncGetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>> PrepareAsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>>(PrepareAsyncGetConfigurationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>> AsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Capture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Frame* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>> AsyncCapture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>>(AsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>> PrepareAsyncCapture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>>(PrepareAsyncCaptureRaw(context, request, cq));
    }
    // Continuous streaming the frames at the preconfigured frame rate.
    // After the given number of frames captured, the stream is finalized.
    // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::FrameStream>> Streaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::FrameStream>>(StreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>> AsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>>(AsyncStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>> PrepareAsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>>(PrepareAsyncStreamingRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncResetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncResetDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncControlDeviceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncControlDeviceStateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get the list of drivers
      virtual void GetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get devices with the adapter selector. If not provided, all devices are listed.
      // The requested adapter (or all) should be updated upon this invocation.
      // This function will update the id-map if cached.
      virtual void GetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get device descriptor by id. This method is rarely used. Query is mainly performed by the framework.
      // The id will be cached by framework. The GetDevices function will invalidate the cache.
      virtual void QueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Capture(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response, std::function<void(::grpc::Status)>) = 0;
      // Continuous streaming the frames at the preconfigured frame rate.
      // After the given number of frames captured, the stream is finalized.
      // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
      virtual void Streaming(::grpc::ClientContext* context, ::mvcam::StreamingRequest* request, ::grpc::experimental::ClientReadReactor< ::mvcam::FrameStream>* reactor) = 0;
      virtual void ResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>* AsyncGetAvailableAdaptersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::AvailableAdaptersResponse>* PrepareAsyncGetAvailableAdaptersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceListResponse>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>* AsyncQueryDeviceByIdRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::DeviceInfo>* PrepareAsyncQueryDeviceByIdRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>* AsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Configuration>* PrepareAsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Status>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>* AsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::Frame>* PrepareAsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mvcam::FrameStream>* StreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>* AsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>* PrepareAsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mvcam::AvailableAdaptersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>> AsyncGetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>>(AsyncGetAvailableAdaptersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>> PrepareAsyncGetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>>(PrepareAsyncGetAvailableAdaptersRaw(context, request, cq));
    }
    ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::mvcam::DeviceListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>> AsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    ::grpc::Status QueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::DeviceInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>> AsyncQueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>>(AsyncQueryDeviceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>> PrepareAsyncQueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>>(PrepareAsyncQueryDeviceByIdRaw(context, request, cq));
    }
    ::grpc::Status OpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncOpenCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncOpenCameraRaw(context, request, cq));
    }
    ::grpc::Status ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncShutdownCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncShutdownCameraRaw(context, request, cq));
    }
    ::grpc::Status ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncConfigureCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncConfigureCameraRaw(context, request, cq));
    }
    ::grpc::Status GetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Configuration* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>> AsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>>(AsyncGetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>> PrepareAsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>>(PrepareAsyncGetConfigurationRaw(context, request, cq));
    }
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Status>> AsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Status>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Status>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Status>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status Capture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::mvcam::Frame* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>> AsyncCapture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>>(AsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>> PrepareAsyncCapture(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>>(PrepareAsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mvcam::FrameStream>> Streaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mvcam::FrameStream>>(StreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>> AsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>>(AsyncStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>> PrepareAsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>>(PrepareAsyncStreamingRaw(context, request, cq));
    }
    ::grpc::Status ResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncResetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncResetDeviceRaw(context, request, cq));
    }
    ::grpc::Status ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncControlDeviceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncControlDeviceStateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAvailableAdapters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDevices(::grpc::ClientContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryDeviceById(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response, std::function<void(::grpc::Status)>) override;
      void OpenCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void GetConfiguration(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response, std::function<void(::grpc::Status)>) override;
      void Capture(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response, std::function<void(::grpc::Status)>) override;
      void Streaming(::grpc::ClientContext* context, ::mvcam::StreamingRequest* request, ::grpc::experimental::ClientReadReactor< ::mvcam::FrameStream>* reactor) override;
      void ResetDevice(::grpc::ClientContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>* AsyncGetAvailableAdaptersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::AvailableAdaptersResponse>* PrepareAsyncGetAvailableAdaptersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceListResponse>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::AdapterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>* AsyncQueryDeviceByIdRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::DeviceInfo>* PrepareAsyncQueryDeviceByIdRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>* AsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Configuration>* PrepareAsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Status>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Status>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>* AsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::Frame>* PrepareAsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mvcam::FrameStream>* StreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request) override;
    ::grpc::ClientAsyncReader< ::mvcam::FrameStream>* AsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mvcam::FrameStream>* PrepareAsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::DeviceControlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableAdapters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryDeviceById_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigureCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_Capture_;
    const ::grpc::internal::RpcMethod rpcmethod_Streaming_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlDeviceState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get the list of drivers
    virtual ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response);
    // Get devices with the adapter selector. If not provided, all devices are listed.
    // The requested adapter (or all) should be updated upon this invocation.
    // This function will update the id-map if cached.
    virtual ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response);
    // Get device descriptor by id. This method is rarely used. Query is mainly performed by the framework.
    // The id will be cached by framework. The GetDevices function will invalidate the cache.
    virtual ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response);
    virtual ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response);
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response);
    virtual ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response);
    // Continuous streaming the frames at the preconfigured frame rate.
    // After the given number of frames captured, the stream is finalized.
    // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
    virtual ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer);
    virtual ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAvailableAdapters() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableAdapters(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::AvailableAdaptersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDevices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::mvcam::AdapterRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::DeviceListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_QueryDeviceById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDeviceById(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::DeviceInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OpenCamera() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenCamera(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownCamera(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCamera(::grpc::ServerContext* context, ::mvcam::ConfigureRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfiguration(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::Configuration>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Capture() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapture(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::Frame>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Streaming() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreaming(::grpc::ServerContext* context, ::mvcam::StreamingRequest* request, ::grpc::ServerAsyncWriter< ::mvcam::FrameStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetDevice() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDevice(::grpc::ServerContext* context, ::mvcam::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlDeviceState(::grpc::ServerContext* context, ::mvcam::DeviceControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAvailableAdapters<WithAsyncMethod_GetDevices<WithAsyncMethod_QueryDeviceById<WithAsyncMethod_OpenCamera<WithAsyncMethod_ShutdownCamera<WithAsyncMethod_ConfigureCamera<WithAsyncMethod_GetConfiguration<WithAsyncMethod_GetStatus<WithAsyncMethod_Capture<WithAsyncMethod_Streaming<WithAsyncMethod_ResetDevice<WithAsyncMethod_ControlDeviceState<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAvailableAdapters() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::mvcam::AvailableAdaptersResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::mvcam::AvailableAdaptersResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAvailableAdapters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDevices() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::AdapterRequest, ::mvcam::DeviceListResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::AdapterRequest* request,
                 ::mvcam::DeviceListResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDevices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_QueryDeviceById() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::mvcam::DeviceInfo>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::mvcam::DeviceInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->QueryDeviceById(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OpenCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->OpenCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ShutdownCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ShutdownCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ConfigureCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::ConfigureRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::ConfigureRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ConfigureCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetConfiguration() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::mvcam::Configuration>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::mvcam::Configuration* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetConfiguration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::mvcam::Status>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::mvcam::Status* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Capture() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::mvcam::Frame>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::mvcam::Frame* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Capture(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Streaming() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mvcam::StreamingRequest, ::mvcam::FrameStream>(
          [this] { return this->Streaming(); }));
    }
    ~ExperimentalWithCallbackMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mvcam::StreamingRequest, ::mvcam::FrameStream>* Streaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mvcam::StreamingRequest, ::mvcam::FrameStream>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ResetDevice() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::IdRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetDevice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ControlDeviceState() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::DeviceControlRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::DeviceControlRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ControlDeviceState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetAvailableAdapters<ExperimentalWithCallbackMethod_GetDevices<ExperimentalWithCallbackMethod_QueryDeviceById<ExperimentalWithCallbackMethod_OpenCamera<ExperimentalWithCallbackMethod_ShutdownCamera<ExperimentalWithCallbackMethod_ConfigureCamera<ExperimentalWithCallbackMethod_GetConfiguration<ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_Capture<ExperimentalWithCallbackMethod_Streaming<ExperimentalWithCallbackMethod_ResetDevice<ExperimentalWithCallbackMethod_ControlDeviceState<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAvailableAdapters() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDevices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_QueryDeviceById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OpenCamera() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Capture() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Streaming() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetDevice() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAvailableAdapters() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableAdapters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDevices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_QueryDeviceById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDeviceById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OpenCamera() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Capture() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Streaming() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetDevice() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlDeviceState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAvailableAdapters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAvailableAdapters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAvailableAdapters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDevices() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDevices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDevices(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryDeviceById() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->QueryDeviceById(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueryDeviceById(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->OpenCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OpenCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ShutdownCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ShutdownCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShutdownCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ConfigureCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ConfigureCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConfigureCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConfiguration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetConfiguration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfiguration(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Capture() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Capture(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capture(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Streaming() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Streaming(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Streaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetDevice() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetDevice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetDevice(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ControlDeviceState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ControlDeviceState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlDeviceState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAvailableAdapters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAvailableAdapters() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::mvcam::AvailableAdaptersResponse>(std::bind(&WithStreamedUnaryMethod_GetAvailableAdapters<BaseClass>::StreamedGetAvailableAdapters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAvailableAdapters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableAdapters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mvcam::AvailableAdaptersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAvailableAdapters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::mvcam::AvailableAdaptersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDevices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::AdapterRequest, ::mvcam::DeviceListResponse>(std::bind(&WithStreamedUnaryMethod_GetDevices<BaseClass>::StreamedGetDevices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::AdapterRequest* request, ::mvcam::DeviceListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::AdapterRequest,::mvcam::DeviceListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_QueryDeviceById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::mvcam::DeviceInfo>(std::bind(&WithStreamedUnaryMethod_QueryDeviceById<BaseClass>::StreamedQueryDeviceById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryDeviceById(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::DeviceInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryDeviceById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::mvcam::DeviceInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OpenCamera() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_OpenCamera<BaseClass>::StreamedOpenCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ShutdownCamera<BaseClass>::StreamedShutdownCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::ConfigureRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ConfigureCamera<BaseClass>::StreamedConfigureCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigureCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::ConfigureRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::mvcam::Configuration>(std::bind(&WithStreamedUnaryMethod_GetConfiguration<BaseClass>::StreamedGetConfiguration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Configuration* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::mvcam::Configuration>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::mvcam::Status>(std::bind(&WithStreamedUnaryMethod_GetStatus<BaseClass>::StreamedGetStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Status* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::mvcam::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Capture() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::mvcam::Frame>(std::bind(&WithStreamedUnaryMethod_Capture<BaseClass>::StreamedCapture, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::mvcam::Frame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCapture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::mvcam::Frame>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetDevice() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::IdRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ResetDevice<BaseClass>::StreamedResetDevice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::IdRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::IdRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::DeviceControlRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ControlDeviceState<BaseClass>::StreamedControlDeviceState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::DeviceControlRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlDeviceState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::DeviceControlRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAvailableAdapters<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_QueryDeviceById<WithStreamedUnaryMethod_OpenCamera<WithStreamedUnaryMethod_ShutdownCamera<WithStreamedUnaryMethod_ConfigureCamera<WithStreamedUnaryMethod_GetConfiguration<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Capture<WithStreamedUnaryMethod_ResetDevice<WithStreamedUnaryMethod_ControlDeviceState<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Streaming() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::mvcam::StreamingRequest, ::mvcam::FrameStream>(std::bind(&WithSplitStreamingMethod_Streaming<BaseClass>::StreamedStreaming, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingRequest* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mvcam::StreamingRequest,::mvcam::FrameStream>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Streaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAvailableAdapters<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_QueryDeviceById<WithStreamedUnaryMethod_OpenCamera<WithStreamedUnaryMethod_ShutdownCamera<WithStreamedUnaryMethod_ConfigureCamera<WithStreamedUnaryMethod_GetConfiguration<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Capture<WithSplitStreamingMethod_Streaming<WithStreamedUnaryMethod_ResetDevice<WithStreamedUnaryMethod_ControlDeviceState<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace mvcam


#endif  // GRPC_camera_5fservice_2eproto__INCLUDED
