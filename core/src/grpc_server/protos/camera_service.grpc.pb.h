// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_service.proto
#ifndef GRPC_camera_5fservice_2eproto__INCLUDED
#define GRPC_camera_5fservice_2eproto__INCLUDED

#include "camera_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mvcam {

class MicroVisionCameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "mvcam.MicroVisionCameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get the list of drivers
    virtual ::grpc::Status GetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::mvcam::GetAdapterRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>> AsyncGetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>>(AsyncGetAdapterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>> PrepareAsyncGetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>>(PrepareAsyncGetAdapterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::mvcam::GetDevicesRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>> AsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::mvcam::OpenCameraRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>> AsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>>(AsyncOpenCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>> PrepareAsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>>(PrepareAsyncOpenCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::mvcam::ShutdownCameraRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>> AsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>>(AsyncShutdownCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>> PrepareAsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>>(PrepareAsyncShutdownCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status Opened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::mvcam::OpenedRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>> AsyncOpened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>>(AsyncOpenedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>> PrepareAsyncOpened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>>(PrepareAsyncOpenedRaw(context, request, cq));
    }
    // [Require open]
    virtual ::grpc::Status Capturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::mvcam::CapturingRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>> AsyncCapturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>>(AsyncCapturingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>> PrepareAsyncCapturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>>(PrepareAsyncCapturingRaw(context, request, cq));
    }
    virtual ::grpc::Status ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::mvcam::ConfigureCameraRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>> AsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>>(AsyncConfigureCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>> PrepareAsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>>(PrepareAsyncConfigureCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::mvcam::GetConfigurationRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>> AsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>>(AsyncGetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>> PrepareAsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>>(PrepareAsyncGetConfigurationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::mvcam::GetStatusRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>> AsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Capture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::mvcam::CaptureRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>> AsyncCapture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>>(AsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>> PrepareAsyncCapture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>>(PrepareAsyncCaptureRaw(context, request, cq));
    }
    // [Require open]
    // Continuous streaming the frames at the preconfigured frame rate.
    // After the given number of frames captured, the stream is finalized.
    // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::FrameStream>> Streaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::FrameStream>>(StreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>> AsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>>(AsyncStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>> PrepareAsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>>(PrepareAsyncStreamingRaw(context, request, cq));
    }
    // subscribing to the opening and capturing state.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::WorkingStateStream>> WorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mvcam::WorkingStateStream>>(WorkingStateStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>> AsyncWorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>>(AsyncWorkingStateStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>> PrepareAsyncWorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>>(PrepareAsyncWorkingStateStreamingRaw(context, request, cq));
    }
    // [Require open]
    virtual ::grpc::Status ResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::mvcam::ResetDeviceRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>> AsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>>(AsyncResetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>> PrepareAsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>>(PrepareAsyncResetDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::mvcam::ControlDeviceStateRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>> AsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>>(AsyncControlDeviceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>> PrepareAsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>>(PrepareAsyncControlDeviceStateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get the list of drivers
      virtual void GetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Opened(::grpc::ClientContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response, std::function<void(::grpc::Status)>) = 0;
      // [Require open]
      virtual void Capturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Capture(::grpc::ClientContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response, std::function<void(::grpc::Status)>) = 0;
      // [Require open]
      // Continuous streaming the frames at the preconfigured frame rate.
      // After the given number of frames captured, the stream is finalized.
      // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
      virtual void Streaming(::grpc::ClientContext* context, ::mvcam::StreamingReq* request, ::grpc::experimental::ClientReadReactor< ::mvcam::FrameStream>* reactor) = 0;
      // subscribing to the opening and capturing state.
      virtual void WorkingStateStreaming(::grpc::ClientContext* context, ::mvcam::WorkingStateStreamingReq* request, ::grpc::experimental::ClientReadReactor< ::mvcam::WorkingStateStream>* reactor) = 0;
      // [Require open]
      virtual void ResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>* AsyncGetAdapterRaw(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetAdapterRes>* PrepareAsyncGetAdapterRaw(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetDevicesRes>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>* AsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenCameraRes>* PrepareAsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>* AsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ShutdownCameraRes>* PrepareAsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>* AsyncOpenedRaw(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::OpenedRes>* PrepareAsyncOpenedRaw(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>* AsyncCapturingRaw(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CapturingRes>* PrepareAsyncCapturingRaw(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>* AsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ConfigureCameraRes>* PrepareAsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>* AsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetConfigurationRes>* PrepareAsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::GetStatusRes>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>* AsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::CaptureRes>* PrepareAsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mvcam::FrameStream>* StreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>* AsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::FrameStream>* PrepareAsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mvcam::WorkingStateStream>* WorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>* AsyncWorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mvcam::WorkingStateStream>* PrepareAsyncWorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>* AsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ResetDeviceRes>* PrepareAsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>* AsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mvcam::ControlDeviceStateRes>* PrepareAsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::mvcam::GetAdapterRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>> AsyncGetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>>(AsyncGetAdapterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>> PrepareAsyncGetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>>(PrepareAsyncGetAdapterRaw(context, request, cq));
    }
    ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::mvcam::GetDevicesRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>> AsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    ::grpc::Status OpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::mvcam::OpenCameraRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>> AsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>>(AsyncOpenCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>> PrepareAsyncOpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>>(PrepareAsyncOpenCameraRaw(context, request, cq));
    }
    ::grpc::Status ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::mvcam::ShutdownCameraRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>> AsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>>(AsyncShutdownCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>> PrepareAsyncShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>>(PrepareAsyncShutdownCameraRaw(context, request, cq));
    }
    ::grpc::Status Opened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::mvcam::OpenedRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>> AsyncOpened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>>(AsyncOpenedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>> PrepareAsyncOpened(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>>(PrepareAsyncOpenedRaw(context, request, cq));
    }
    ::grpc::Status Capturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::mvcam::CapturingRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>> AsyncCapturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>>(AsyncCapturingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>> PrepareAsyncCapturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>>(PrepareAsyncCapturingRaw(context, request, cq));
    }
    ::grpc::Status ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::mvcam::ConfigureCameraRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>> AsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>>(AsyncConfigureCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>> PrepareAsyncConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>>(PrepareAsyncConfigureCameraRaw(context, request, cq));
    }
    ::grpc::Status GetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::mvcam::GetConfigurationRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>> AsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>>(AsyncGetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>> PrepareAsyncGetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>>(PrepareAsyncGetConfigurationRaw(context, request, cq));
    }
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::mvcam::GetStatusRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>> AsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status Capture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::mvcam::CaptureRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>> AsyncCapture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>>(AsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>> PrepareAsyncCapture(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>>(PrepareAsyncCaptureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mvcam::FrameStream>> Streaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mvcam::FrameStream>>(StreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>> AsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>>(AsyncStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>> PrepareAsyncStreaming(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::FrameStream>>(PrepareAsyncStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mvcam::WorkingStateStream>> WorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mvcam::WorkingStateStream>>(WorkingStateStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>> AsyncWorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>>(AsyncWorkingStateStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>> PrepareAsyncWorkingStateStreaming(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>>(PrepareAsyncWorkingStateStreamingRaw(context, request, cq));
    }
    ::grpc::Status ResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::mvcam::ResetDeviceRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>> AsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>>(AsyncResetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>> PrepareAsyncResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>>(PrepareAsyncResetDeviceRaw(context, request, cq));
    }
    ::grpc::Status ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::mvcam::ControlDeviceStateRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>> AsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>>(AsyncControlDeviceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>> PrepareAsyncControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>>(PrepareAsyncControlDeviceStateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAdapter(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response, std::function<void(::grpc::Status)>) override;
      void GetDevices(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response, std::function<void(::grpc::Status)>) override;
      void OpenCamera(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response, std::function<void(::grpc::Status)>) override;
      void ShutdownCamera(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response, std::function<void(::grpc::Status)>) override;
      void Opened(::grpc::ClientContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response, std::function<void(::grpc::Status)>) override;
      void Capturing(::grpc::ClientContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response, std::function<void(::grpc::Status)>) override;
      void ConfigureCamera(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response, std::function<void(::grpc::Status)>) override;
      void GetConfiguration(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response, std::function<void(::grpc::Status)>) override;
      void Capture(::grpc::ClientContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response, std::function<void(::grpc::Status)>) override;
      void Streaming(::grpc::ClientContext* context, ::mvcam::StreamingReq* request, ::grpc::experimental::ClientReadReactor< ::mvcam::FrameStream>* reactor) override;
      void WorkingStateStreaming(::grpc::ClientContext* context, ::mvcam::WorkingStateStreamingReq* request, ::grpc::experimental::ClientReadReactor< ::mvcam::WorkingStateStream>* reactor) override;
      void ResetDevice(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response, std::function<void(::grpc::Status)>) override;
      void ControlDeviceState(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>* AsyncGetAdapterRaw(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetAdapterRes>* PrepareAsyncGetAdapterRaw(::grpc::ClientContext* context, const ::mvcam::GetAdapterReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetDevicesRes>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::mvcam::GetDevicesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>* AsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::OpenCameraRes>* PrepareAsyncOpenCameraRaw(::grpc::ClientContext* context, const ::mvcam::OpenCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>* AsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ShutdownCameraRes>* PrepareAsyncShutdownCameraRaw(::grpc::ClientContext* context, const ::mvcam::ShutdownCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>* AsyncOpenedRaw(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::OpenedRes>* PrepareAsyncOpenedRaw(::grpc::ClientContext* context, const ::mvcam::OpenedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>* AsyncCapturingRaw(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::CapturingRes>* PrepareAsyncCapturingRaw(::grpc::ClientContext* context, const ::mvcam::CapturingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>* AsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ConfigureCameraRes>* PrepareAsyncConfigureCameraRaw(::grpc::ClientContext* context, const ::mvcam::ConfigureCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>* AsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetConfigurationRes>* PrepareAsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::mvcam::GetConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::GetStatusRes>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::mvcam::GetStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>* AsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::CaptureRes>* PrepareAsyncCaptureRaw(::grpc::ClientContext* context, const ::mvcam::CaptureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mvcam::FrameStream>* StreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request) override;
    ::grpc::ClientAsyncReader< ::mvcam::FrameStream>* AsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mvcam::FrameStream>* PrepareAsyncStreamingRaw(::grpc::ClientContext* context, const ::mvcam::StreamingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mvcam::WorkingStateStream>* WorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request) override;
    ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>* AsyncWorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mvcam::WorkingStateStream>* PrepareAsyncWorkingStateStreamingRaw(::grpc::ClientContext* context, const ::mvcam::WorkingStateStreamingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>* AsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ResetDeviceRes>* PrepareAsyncResetDeviceRaw(::grpc::ClientContext* context, const ::mvcam::ResetDeviceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>* AsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mvcam::ControlDeviceStateRes>* PrepareAsyncControlDeviceStateRaw(::grpc::ClientContext* context, const ::mvcam::ControlDeviceStateReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAdapter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_Opened_;
    const ::grpc::internal::RpcMethod rpcmethod_Capturing_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigureCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_Capture_;
    const ::grpc::internal::RpcMethod rpcmethod_Streaming_;
    const ::grpc::internal::RpcMethod rpcmethod_WorkingStateStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlDeviceState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get the list of drivers
    virtual ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response);
    virtual ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response);
    virtual ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response);
    virtual ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response);
    virtual ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response);
    // [Require open]
    virtual ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response);
    virtual ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response);
    virtual ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response);
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response);
    virtual ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response);
    // [Require open]
    // Continuous streaming the frames at the preconfigured frame rate.
    // After the given number of frames captured, the stream is finalized.
    // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
    virtual ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer);
    // subscribing to the opening and capturing state.
    virtual ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer);
    // [Require open]
    virtual ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response);
    virtual ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAdapter() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAdapter(::grpc::ServerContext* context, ::mvcam::GetAdapterReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::GetAdapterRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDevices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::mvcam::GetDevicesReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::GetDevicesRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OpenCamera() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenCamera(::grpc::ServerContext* context, ::mvcam::OpenCameraReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::OpenCameraRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownCamera(::grpc::ServerContext* context, ::mvcam::ShutdownCameraReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::ShutdownCameraRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Opened() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpened(::grpc::ServerContext* context, ::mvcam::OpenedReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::OpenedRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Capturing() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapturing(::grpc::ServerContext* context, ::mvcam::CapturingReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::CapturingRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCamera(::grpc::ServerContext* context, ::mvcam::ConfigureCameraReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::ConfigureCameraRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfiguration(::grpc::ServerContext* context, ::mvcam::GetConfigureReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::GetConfigurationRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::mvcam::GetStatusReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::GetStatusRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Capture() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapture(::grpc::ServerContext* context, ::mvcam::CaptureReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::CaptureRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Streaming() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreaming(::grpc::ServerContext* context, ::mvcam::StreamingReq* request, ::grpc::ServerAsyncWriter< ::mvcam::FrameStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WorkingStateStreaming() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWorkingStateStreaming(::grpc::ServerContext* context, ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerAsyncWriter< ::mvcam::WorkingStateStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetDevice() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDevice(::grpc::ServerContext* context, ::mvcam::ResetDeviceReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::ResetDeviceRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlDeviceState(::grpc::ServerContext* context, ::mvcam::ControlDeviceStateReq* request, ::grpc::ServerAsyncResponseWriter< ::mvcam::ControlDeviceStateRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAdapter<WithAsyncMethod_GetDevices<WithAsyncMethod_OpenCamera<WithAsyncMethod_ShutdownCamera<WithAsyncMethod_Opened<WithAsyncMethod_Capturing<WithAsyncMethod_ConfigureCamera<WithAsyncMethod_GetConfiguration<WithAsyncMethod_GetStatus<WithAsyncMethod_Capture<WithAsyncMethod_Streaming<WithAsyncMethod_WorkingStateStreaming<WithAsyncMethod_ResetDevice<WithAsyncMethod_ControlDeviceState<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAdapter() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::GetAdapterReq, ::mvcam::GetAdapterRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::GetAdapterReq* request,
                 ::mvcam::GetAdapterRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAdapter(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDevices() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::GetDevicesReq, ::mvcam::GetDevicesRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::GetDevicesReq* request,
                 ::mvcam::GetDevicesRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDevices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OpenCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::OpenCameraReq, ::mvcam::OpenCameraRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::OpenCameraReq* request,
                 ::mvcam::OpenCameraRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->OpenCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ShutdownCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::ShutdownCameraReq, ::mvcam::ShutdownCameraRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::ShutdownCameraReq* request,
                 ::mvcam::ShutdownCameraRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ShutdownCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Opened() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::OpenedReq, ::mvcam::OpenedRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::OpenedReq* request,
                 ::mvcam::OpenedRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Opened(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Capturing() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::CapturingReq, ::mvcam::CapturingRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::CapturingReq* request,
                 ::mvcam::CapturingRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Capturing(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ConfigureCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::ConfigureCameraReq, ::mvcam::ConfigureCameraRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::ConfigureCameraReq* request,
                 ::mvcam::ConfigureCameraRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ConfigureCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetConfiguration() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::GetConfigureReq, ::mvcam::GetConfigurationRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::GetConfigureReq* request,
                 ::mvcam::GetConfigurationRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetConfiguration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::GetStatusReq, ::mvcam::GetStatusRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::GetStatusReq* request,
                 ::mvcam::GetStatusRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Capture() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::CaptureReq, ::mvcam::CaptureRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::CaptureReq* request,
                 ::mvcam::CaptureRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Capture(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Streaming() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mvcam::StreamingReq, ::mvcam::FrameStream>(
          [this] { return this->Streaming(); }));
    }
    ~ExperimentalWithCallbackMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mvcam::StreamingReq, ::mvcam::FrameStream>* Streaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mvcam::StreamingReq, ::mvcam::FrameStream>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WorkingStateStreaming() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mvcam::WorkingStateStreamingReq, ::mvcam::WorkingStateStream>(
          [this] { return this->WorkingStateStreaming(); }));
    }
    ~ExperimentalWithCallbackMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mvcam::WorkingStateStreamingReq, ::mvcam::WorkingStateStream>* WorkingStateStreaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mvcam::WorkingStateStreamingReq, ::mvcam::WorkingStateStream>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ResetDevice() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::ResetDeviceReq, ::mvcam::ResetDeviceRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::ResetDeviceReq* request,
                 ::mvcam::ResetDeviceRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetDevice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ControlDeviceState() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::mvcam::ControlDeviceStateReq, ::mvcam::ControlDeviceStateRes>(
          [this](::grpc::ServerContext* context,
                 const ::mvcam::ControlDeviceStateReq* request,
                 ::mvcam::ControlDeviceStateRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ControlDeviceState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetAdapter<ExperimentalWithCallbackMethod_GetDevices<ExperimentalWithCallbackMethod_OpenCamera<ExperimentalWithCallbackMethod_ShutdownCamera<ExperimentalWithCallbackMethod_Opened<ExperimentalWithCallbackMethod_Capturing<ExperimentalWithCallbackMethod_ConfigureCamera<ExperimentalWithCallbackMethod_GetConfiguration<ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_Capture<ExperimentalWithCallbackMethod_Streaming<ExperimentalWithCallbackMethod_WorkingStateStreaming<ExperimentalWithCallbackMethod_ResetDevice<ExperimentalWithCallbackMethod_ControlDeviceState<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAdapter() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDevices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OpenCamera() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Opened() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Capturing() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Capture() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Streaming() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WorkingStateStreaming() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetDevice() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAdapter() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAdapter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDevices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OpenCamera() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Opened() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpened(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Capturing() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapturing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Capture() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCapture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Streaming() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WorkingStateStreaming() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWorkingStateStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetDevice() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlDeviceState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAdapter() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAdapter(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAdapter(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDevices() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDevices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDevices(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->OpenCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void OpenCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ShutdownCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ShutdownCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShutdownCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Opened() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Opened(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Opened(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Capturing() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Capturing(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capturing(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ConfigureCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ConfigureCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConfigureCamera(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConfiguration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetConfiguration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfiguration(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Capture() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Capture(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Capture(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Streaming() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Streaming(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Streaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WorkingStateStreaming() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->WorkingStateStreaming(); }));
    }
    ~ExperimentalWithRawCallbackMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* WorkingStateStreaming() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetDevice() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetDevice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetDevice(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ControlDeviceState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ControlDeviceState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlDeviceState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAdapter() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::GetAdapterReq, ::mvcam::GetAdapterRes>(std::bind(&WithStreamedUnaryMethod_GetAdapter<BaseClass>::StreamedGetAdapter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAdapter(::grpc::ServerContext* context, const ::mvcam::GetAdapterReq* request, ::mvcam::GetAdapterRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAdapter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::GetAdapterReq,::mvcam::GetAdapterRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDevices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::GetDevicesReq, ::mvcam::GetDevicesRes>(std::bind(&WithStreamedUnaryMethod_GetDevices<BaseClass>::StreamedGetDevices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::mvcam::GetDevicesReq* request, ::mvcam::GetDevicesRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::GetDevicesReq,::mvcam::GetDevicesRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OpenCamera() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::OpenCameraReq, ::mvcam::OpenCameraRes>(std::bind(&WithStreamedUnaryMethod_OpenCamera<BaseClass>::StreamedOpenCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenCamera(::grpc::ServerContext* context, const ::mvcam::OpenCameraReq* request, ::mvcam::OpenCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::OpenCameraReq,::mvcam::OpenCameraRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ShutdownCamera() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::ShutdownCameraReq, ::mvcam::ShutdownCameraRes>(std::bind(&WithStreamedUnaryMethod_ShutdownCamera<BaseClass>::StreamedShutdownCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ShutdownCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownCamera(::grpc::ServerContext* context, const ::mvcam::ShutdownCameraReq* request, ::mvcam::ShutdownCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::ShutdownCameraReq,::mvcam::ShutdownCameraRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Opened : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Opened() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::OpenedReq, ::mvcam::OpenedRes>(std::bind(&WithStreamedUnaryMethod_Opened<BaseClass>::StreamedOpened, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Opened() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Opened(::grpc::ServerContext* context, const ::mvcam::OpenedReq* request, ::mvcam::OpenedRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpened(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::OpenedReq,::mvcam::OpenedRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Capturing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Capturing() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::CapturingReq, ::mvcam::CapturingRes>(std::bind(&WithStreamedUnaryMethod_Capturing<BaseClass>::StreamedCapturing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Capturing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Capturing(::grpc::ServerContext* context, const ::mvcam::CapturingReq* request, ::mvcam::CapturingRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCapturing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::CapturingReq,::mvcam::CapturingRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigureCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ConfigureCamera() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::ConfigureCameraReq, ::mvcam::ConfigureCameraRes>(std::bind(&WithStreamedUnaryMethod_ConfigureCamera<BaseClass>::StreamedConfigureCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConfigureCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigureCamera(::grpc::ServerContext* context, const ::mvcam::ConfigureCameraReq* request, ::mvcam::ConfigureCameraRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigureCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::ConfigureCameraReq,::mvcam::ConfigureCameraRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetConfiguration() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::GetConfigureReq, ::mvcam::GetConfigurationRes>(std::bind(&WithStreamedUnaryMethod_GetConfiguration<BaseClass>::StreamedGetConfiguration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConfiguration(::grpc::ServerContext* context, const ::mvcam::GetConfigureReq* request, ::mvcam::GetConfigurationRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::GetConfigureReq,::mvcam::GetConfigurationRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::GetStatusReq, ::mvcam::GetStatusRes>(std::bind(&WithStreamedUnaryMethod_GetStatus<BaseClass>::StreamedGetStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::mvcam::GetStatusReq* request, ::mvcam::GetStatusRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::GetStatusReq,::mvcam::GetStatusRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Capture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Capture() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::CaptureReq, ::mvcam::CaptureRes>(std::bind(&WithStreamedUnaryMethod_Capture<BaseClass>::StreamedCapture, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Capture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Capture(::grpc::ServerContext* context, const ::mvcam::CaptureReq* request, ::mvcam::CaptureRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCapture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::CaptureReq,::mvcam::CaptureRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetDevice() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::ResetDeviceReq, ::mvcam::ResetDeviceRes>(std::bind(&WithStreamedUnaryMethod_ResetDevice<BaseClass>::StreamedResetDevice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetDevice(::grpc::ServerContext* context, const ::mvcam::ResetDeviceReq* request, ::mvcam::ResetDeviceRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::ResetDeviceReq,::mvcam::ResetDeviceRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlDeviceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ControlDeviceState() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::mvcam::ControlDeviceStateReq, ::mvcam::ControlDeviceStateRes>(std::bind(&WithStreamedUnaryMethod_ControlDeviceState<BaseClass>::StreamedControlDeviceState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ControlDeviceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlDeviceState(::grpc::ServerContext* context, const ::mvcam::ControlDeviceStateReq* request, ::mvcam::ControlDeviceStateRes* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlDeviceState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mvcam::ControlDeviceStateReq,::mvcam::ControlDeviceStateRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAdapter<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_OpenCamera<WithStreamedUnaryMethod_ShutdownCamera<WithStreamedUnaryMethod_Opened<WithStreamedUnaryMethod_Capturing<WithStreamedUnaryMethod_ConfigureCamera<WithStreamedUnaryMethod_GetConfiguration<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Capture<WithStreamedUnaryMethod_ResetDevice<WithStreamedUnaryMethod_ControlDeviceState<Service > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Streaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Streaming() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler< ::mvcam::StreamingReq, ::mvcam::FrameStream>(std::bind(&WithSplitStreamingMethod_Streaming<BaseClass>::StreamedStreaming, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Streaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Streaming(::grpc::ServerContext* context, const ::mvcam::StreamingReq* request, ::grpc::ServerWriter< ::mvcam::FrameStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mvcam::StreamingReq,::mvcam::FrameStream>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_WorkingStateStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_WorkingStateStreaming() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler< ::mvcam::WorkingStateStreamingReq, ::mvcam::WorkingStateStream>(std::bind(&WithSplitStreamingMethod_WorkingStateStreaming<BaseClass>::StreamedWorkingStateStreaming, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_WorkingStateStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WorkingStateStreaming(::grpc::ServerContext* context, const ::mvcam::WorkingStateStreamingReq* request, ::grpc::ServerWriter< ::mvcam::WorkingStateStream>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWorkingStateStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mvcam::WorkingStateStreamingReq,::mvcam::WorkingStateStream>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Streaming<WithSplitStreamingMethod_WorkingStateStreaming<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAdapter<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_OpenCamera<WithStreamedUnaryMethod_ShutdownCamera<WithStreamedUnaryMethod_Opened<WithStreamedUnaryMethod_Capturing<WithStreamedUnaryMethod_ConfigureCamera<WithStreamedUnaryMethod_GetConfiguration<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Capture<WithSplitStreamingMethod_Streaming<WithSplitStreamingMethod_WorkingStateStreaming<WithStreamedUnaryMethod_ResetDevice<WithStreamedUnaryMethod_ControlDeviceState<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace mvcam


#endif  // GRPC_camera_5fservice_2eproto__INCLUDED
